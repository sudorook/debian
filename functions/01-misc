#! /bin/bash

# Debian (post-)install scripts
# Copyright (C) 2020
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

DIR="$(dirname "$0")"

function install_zsh {
  local zsh="${DIR}/packages/zsh.list"
  local zshrc="${DIR}/dotfiles/zshrc"
  local p10krc="${DIR}/dotfiles/p10k"

  show_header "Installing Zsh."
  check_installed "${zsh}"
  show_success "Zsh installed."

  mkdir -p "${HOME}/.local/share/zsh/site-functions"

  copy_config_file "${zshrc}" "${HOME}/.zshrc"
  copy_config_file "${p10krc}" "${HOME}/.p10k.zsh"
}

function install_selinux {
  local selinux="${DIR}/packages/selinux.list"

  show_header "Installing SELinux and setting rules."
  check_installed "${selinux}"
  show_success "SELinux installed."

  show_info "Activating SELinux."
  sudo selinux-activate

  if [ -f /etc/default/grub ]; then
    show_info "Updating GRUB kernel command line."
    local cmdline
    cmdline="$(sed -n "s|^GRUB_CMDLINE_LINUX=\"\(.*\)\"|\1|p" /etc/default/grub)"
    if ! [[ "${cmdline}" =~ security=selinux ]]; then
      sed -i "s|^GRUB_CMDLINE_LINUX=\"${cmdline}\"|GRUB_CMDLINE_LINUX=\"${cmdline} security=selinux selinux=1\"|g" /etc/default/grub
    fi
  fi

  if [[ "$(sudo bootctl is-installed)" = "yes" ]]; then
    show_info "Updating systemd-boot kernel command line(s)."
    local cmdline
    local efidir
    local entry
    efidir="$(bootctl -p)"
    for entry in "${efidir}"/loader/entries/*.conf; do
      cmdline="$(sed -n "s/^options\s\+\(.*\)/\1/p" "${entry}")"
      if ! [[ "${cmdline}" =~ security=selinux ]]; then
        sed -i "s|^options\(\s\+\)${cmdline}|options\1${cmdline} selinux=1 security=selinux|g" "${entry}"
      fi
    done
  fi

  show_success "SELinux setup complete."
  show_info \
    "Reboot the computer to start using SELinux. It will be in permissive" \
    "mode by default. Run \`sestatus\` (as root) after rebooting to verify" \
    "that SELinux is installed properly. To start enforcing policies, add " \
    "'enforcing=1' to the kernel command line."
}

function install_utils {
  local utils="${DIR}/packages/utils.list"
  local tmuxconfig="${DIR}/dotfiles/tmux.conf"

  show_header "Installing general utilities."
  check_installed "${utils}"
  show_success "Utilities installed."

  show_info "Installing tmux config."
  cp -f "${tmuxconfig}" "${HOME}/.tmux.conf"
}

function install_laptop {
  local laptop="${DIR}/packages/laptop.list"

  show_header "Installing laptop utilities."
  check_installed "${laptop}"
  show_success "Laptop utilities installed."

  # Enable tlp on laptops.
  show_info "Enabling and starting tlp systemd units."
  sudo systemctl enable tlp.service
  sudo systemctl start tlp.service
  show_success "tlp enabled."
}

function install_plymouth {
  local plymouth="${DIR}/packages/plymouth.list"
  local plymouthkde="${DIR}/packages/plymouth-kde.list"
  local grubconf="/etc/default/grub"

  show_header "Installing Plymouth splash screen."
  check_installed "${plymouth}"
  show_success "Plymouth installed."

  if dpkg -s plasma-desktop > /dev/null 2>&1; then
    show_header "KDE Plasma installed. Installing Plymouth integration."
    check_installed "${plymouthkde}"
    show_success "Plymouth integration installed."
  fi

  if [ -f "${grubconf}" ] && ! sudo grep -q "^GRUB_CMDLINE_LINUX_DEFAULT=.*splash" "${grubconf}"; then
    show_info "Updating GRUB defaults for splash screen."
    sudo sed -i '/^GRUB_CMDLINE_LINUX_DEFAULT=/s/"$/ splash"/g' "${grubconf}"
    sudo update-grub
  fi

  if [ "$(sudo bootctl is-installed)" = yes ]; then
    show_info "Updating Gummiboot entries for Plymouth splash screen."
    local efidir
    local conf
    efidir="$(bootctl -p)"
    while read -r conf; do
      if ! grep -q "^options.*splash" "${conf}"; then
        sudo sed -i "/^options/s/$/ splash/" "${conf}"
      fi
    done < <(sudo find "${efidir}"/loader/entries/ -name "*.conf")
  fi
}

function 01-misc {
  show_question "Misc: what do you want to install?"
  show_info "Main\n ${ENDBRANCH} Misc (Hit ENTER to see options again.)"

  local options=(
    "Back"
    "All"
    "Linux utilities"
    "Laptop tools"
    "Plymouth"
    "SELinux"
    "Zsh")
  local option
  select option in "${options[@]}"; do
    case "${option}" in
      "Back")
        break
        ;;
      "All")
        install_utils
        install_laptop
        install_plymouth
        install_selinux
        install_zsh
        show_info "Main\n ${ENDBRANCH} Misc (Hit ENTER to see options again.)"
        ;;
      "Linux utilities")
        install_utils
        show_info "Main\n ${ENDBRANCH} Misc (Hit ENTER to see options again.)"
        ;;
      "Laptop tools")
        install_laptop
        show_info "Main\n ${ENDBRANCH} Misc (Hit ENTER to see options again.)"
        ;;
      "Plymouth")
        install_plymouth
        show_info "Main\n ${ENDBRANCH} Misc (Hit ENTER to see options again.)"
        ;;
      "SELinux")
        install_selinux
        show_info "Main\n ${ENDBRANCH} Misc (Hit ENTER to see options again.)"
        ;;
      "Zsh")
        install_zsh
        show_info "Main\n ${ENDBRANCH} Misc (Hit ENTER to see options again.)"
        ;;
      *)
        show_warning "Invalid option."
        show_info "Main\n ${ENDBRANCH} Misc (Hit ENTER to see options again.)"
        ;;
    esac
  done
}
