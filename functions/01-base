#! /bin/bash

# Debian (post-)install scripts
# Copyright (C) 2020
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


dir="$(dirname "$0")"

base="${dir}/packages/base.list"
bashrc="${dir}/dotfiles/bashrc"
bashprofile="${dir}/dotfiles/bash_profile"
function install_base {
  show_header "Installing base packages and their config files."
  check_installed "${base}"
  check_fail
  show_success "Base packages installed."

  if ! [ -f "${HOME}/.bash_profile" ]; then
    show_info "Installing bash_profile."
    cp -f "${bashprofile}" "${HOME}/.bash_profile"
    show_success "Installed bash_profile."
  fi

  show_info "Installing bashrc."
  cp -f "${bashrc}" "${HOME}/.bashrc"
  show_success "Installed bashrc."
}

firmware="${dir}/packages/firmware.list"
srclist="/etc/apt/sources.list"
function install_firmware {
  local release
  release=$(lsb_release -sc)
  if ! grep non-free "${srclist}" >/dev/null 2>&1; then
    show_warning "non-free repos need to be enabled first."
  else
    show_header "Installing non-free firmware."
    check_installed "${firmware}"
    check_fail
    show_success "Firmware installed."
  fi
}

srclist="/etc/apt/sources.list"
function enable_contrib_repos {
  local release
  release=$(lsb_release -sc)
  if ! grep contrib "${srclist}" >/dev/null 2>&1; then
    show_info "Enabling contrib repos."
    sudo sed -i "s,\(.* ${release} main.*\)$,\1 contrib,g" ${srclist}
    sudo sed -i "s,\(.* ${release}-updates main.*\)$,\1 contrib,g" ${srclist}
    sudo sed -i "s,\(.* ${release}-backports main.*\)$,\1 contrib,g" ${srclist}
    sudo apt-get update
  else
    show_info "contrib already enabled."
  fi
}

srclist="/etc/apt/sources.list"
function enable_nonfree_repos {
  local release
  release=$(lsb_release -sc)
  if ! grep non-free "${srclist}" >/dev/null 2>&1; then
    show_info "Enabling non-free repos."
    sudo sed -i "s,\(.* ${release} main.*\)$,\1 non-free,g" ${srclist}
    sudo sed -i "s,\(.* ${release}-updates main.*\)$,\1 non-free,g" ${srclist}
    sudo sed -i "s,\(.* ${release}-backports main.*\)$,\1 non-free,g" ${srclist}
    sudo apt-get update
  else
    show_info "non-free already enabled."
  fi
}

srclist="/etc/apt/sources.list"
busterlist="${dir}/sources/buster-sources.list"
bullseyelist="${dir}/sources/bullseye-sources.list"
bookwormlist="${dir}/sources/bookworm-sources.list"
sidlist="${dir}/sources/sid-sources.list"
function upgrade_debian_release {
  # check how current sources.list is configured.
  local is_onion
  local is_contrib
  local is_nonfree
  local is_upgraded
  local release
  is_onion=$(grep -q onion ${srclist} && echo $? || echo $?)
  is_contrib=$(grep -q contrib ${srclist} && echo $? || echo $?)
  is_nonfree=$(grep -q nonfree ${srclist} && echo $? || echo $?)
  is_upgraded=false
  release=$(lsb_release -sc)

  show_question "Upgrade Debian release?"
  local options=("Back" "Buster" "Bullseye" "Bookworm" "Sid")
  select option in "${options[@]}"; do
    case $option in
      "Back")
        break
        ;;
      "Buster")
        if [[ "$(lsb_release -sc)" == "buster" ]]; then
          show_warning "Already set to $(lsb_release -sc)."
        elif [[ "$(lsb_release -sc)" == "bullseye" ]] || \
             [[ "$(lsb_release -sc)" == "bookworm" ]] || \
             [[ "$(lsb_release -sc)" == "sid" ]]; then
          show_warning "Downgrades not possible."
        else
          sudo cp -f "${srclist}" "${srclist}.${RANDOM}.bak"
          sudo cp -f "${busterlist}" "${srclist}"
          is_upgraded=true
          release=buster
        fi
        break
        ;;
      "Bullseye")
        if [[ "$(lsb_release -sc)" == "bullseye" ]]; then
          show_warning "Already set to $(lsb_release -sc)."
        elif [[ "$(lsb_release -sc)" == "bookworm" ]] || \
             [[ "$(lsb_release -sc)" == "sid" ]]; then
          show_warning "Downgrades not possible."
        else
          sudo cp -f "${srclist}" "${srclist}.${RANDOM}.bak"
          sudo cp -f "${bullseyelist}" "${srclist}"
          is_upgraded=true
          release=bullseye
        fi
        break
        ;;
      "Bookworm")
        if [[ "$(lsb_release -sc)" == "bookworm" ]]; then
          show_warning "Already set to $(lsb_release -sc)."
        elif [[ "$(lsb_release -sc)" == "sid" ]]; then
          show_warning "Downgrades not possible."
        else
          sudo cp -f "${srclist}" "${srclist}.${RANDOM}.bak"
          sudo cp -f "${bookwormlist}" "${srclist}"
          is_upgraded=true
          release=bookworm
        fi
        break
        ;;
      "Sid")
        if [[ "$(lsb_release -sc)" == "sid" ]]; then
          show_warning "Already set to $(lsb_release -sc)."
        else
          sudo cp -f "${srclist}" "${srclist}.${RANDOM}.bak"
          sudo cp -f "${sidlist}" "${srclist}"
          is_upgraded=true
          release=sid
        fi
        break
        ;;
      *)
        show_warning "Invalid option."
        show_info "Hit ENTER to see options again."
        ;;
    esac
  done

  if [ "${is_upgraded}" == true ]; then
    [ "${is_contrib}" == true ] && \
      sudo sed -i "s,\(.* ${release} main.*\)$,\1 contrib,g" ${srclist} && \
      sudo sed -i "s,\(.* ${release}-updates main.*\)$,\1 contrib,g" ${srclist}
    [ "${is_nonfree}" == true ] && \
      sudo sed -i "s,\(.* ${release} main.*\)$,\1 non-free,g" ${srclist} && \
      sudo sed -i "s,\(.* ${release}-updates main.*\)$,\1 non-free,g" ${srclist}
    [ "${is_onion}" == true ] && \
      sudo sed -i "s,https://deb.debian.org,tor+http://vwakviie2ienjx6t.onion,g" ${srclist}
    [ "${is_onion}" == true ] && \
      sudo sed -i "s,https://security.debian.org/,tor+http://sgvtcaew4bxjd7ln.onion/debian-security/,g" ${srclist}

    sudo sh -c "apt-get update && \
      apt-get -y upgrade && \
      apt-get -y dist-upgrade && \
      apt-get -y autoremove && \
      apt-get -y autoclean && \
      update-grub"

    show_info "Reboot your system after major updates."
  fi
}

function enable_sudo_insults {
  # Customize sudo to insult incorrect password attempts
  if ! sudo grep "^Defaults\s\+insults" /etc/sudoers >/dev/null 2>&1; then
    show_info "Enabling sudo insults."
    sudo sh -c 'cat /etc/sudoers | \
                sed -e "/^Defaults\tsecure_path/a Defaults\tinsults" | \
                (EDITOR="tee" visudo >/dev/null)'
  else
    show_info "Insults already enabled, you masochist."
  fi
}

purge="${dir}/packages/purge.list"
function purge_packages {
  show_header "Purging unwanted packaged often installed by default."
  check_uninstalled "${purge}"
  check_fail
  show_success "Base packages installed."
}

function update_packages {
  show_header "Updating packages."
  sudo sh -c "apt-get update && \
    apt-get -y upgrade && \
    apt-get -y dist-upgrade && \
    apt-get -y autoremove && \
    apt-get -y autoclean && \
    update-grub"
  check_fail
  show_success "Packages updated."
}

pcspkr_blacklist="/etc/modprobe.d/nobeep.conf"
gtk2conf="${HOME}/.gtkrc-2.0"
gtk3conf="${HOME}/.config/gtk-3.0/settings.ini"
function disable_beep {
  show_header "Disable PC speaker beep."
  show_info "Blacklisting pcspkr and snd_pcsp kernel modules."
  if ! [ "$(ls -A /etc/modprobe.d/)" ]; then
    sudo sh -c "echo 'blacklist pcspkr' >> ${pcspkr_blacklist}"
    sudo sh -c "echo 'blacklist snd_pcsp' >> ${pcspkr_blacklist}"
  else
    if ! find /etc/modprobe.d/ -type f \
         -exec grep "blacklist pcspkr" {} + >/dev/null 2>&1; then
      sudo sh -c "echo 'blacklist pcspkr' >> ${pcspkr_blacklist}"
    fi
    if ! find /etc/modprobe.d/ -type f \
         -exec grep "blacklist snd_pcsp" {} + >/dev/null 2>&1; then
      sudo sh -c "echo 'blacklist snd_pcsp' >> ${pcspkr_blacklist}"
    fi
  fi
  show_success "Blacklisted in ${pcspkr_blacklist}."

  show_info "Disabling gtk2 and gtk3 error-bell."
  if [ -f "${gtk2conf}" ]; then
    if grep "^gtk-error-bell=" "${gtk2conf}" >/dev/null 2>&1; then
      sed -i "s/^gtk-error-bell=.*$/gtk-error-bell=0/g" "${gtk2conf}"
    else
      echo "gtk-error-bell=0" >> "${gtk2conf}"
    fi
  else
    mkdir -p "$(dirname "${gtk2conf}")"
    echo "gtk-error-bell=0" >> "${gtk2conf}"
  fi
  if [ -f "${gtk3conf}" ]; then
    if grep "^gtk-error-bell=" "${gtk3conf}" >/dev/null 2>&1; then
      sed -i "s/^gtk-error-bell=.*$/gtk-error-bell=0/g" "${gtk3conf}"
    elif grep "^[Settings]" "${gtk3conf}" >/dev/null 2>&1; then
      sed -i "/^[Settings]$/a gtk-error-bell=0" "${gtk3conf}"
    else
      echo "[Settings]" >> "${gtk3conf}"
      echo "gtk-error-bell=0" >> "${gtk3conf}"
    fi
  else
    mkdir -p "$(dirname "${gtk3conf}")"
    echo "[Settings]" > "${gtk3conf}"
    echo "gtk-error-bell=0" >> "${gtk3conf}"
  fi
}

function 01-base {
  show_question "Base: what do you want to install?"
  show_info "Main\n ${endbranch} Base (Hit ENTER to see options again.)"

  local options=(
    "Back"
    "All"
    "Base packages"
    "Purge packages"
    "Firmware"
    "Updates"
    "Enable contrib"
    "Enable non-free"
    "Upgrade Debian release"
    "Sudo insults"
    "Disable system beep")
  select option in "${options[@]}"; do
    case $option in
      "Back")
        break
        ;;
      "All")
        purge_packages
        update_packages
        install_base
        install_firmware
        enable_contrib_repos
        enable_nonfree_repos
        enable_sudo_insults
        disable_beep
        show_info "Main\n ${endbranch} Base (Hit ENTER to see options again.)"
        break
        ;;
      "Base packages")
        install_base
        show_info "Main\n ${endbranch} Base (Hit ENTER to see options again.)"
        ;;
      "Purge packages")
        purge_packages
        show_info "Main\n ${endbranch} Base (Hit ENTER to see options again.)"
        ;;
      "Firmware")
        install_firmware
        show_info "Main\n ${endbranch} Base (Hit ENTER to see options again.)"
        ;;
      "Updates")
        update_packages
        show_info "Main\n ${endbranch} Base (Hit ENTER to see options again.)"
        ;;
      "Enable contrib")
        enable_contrib_repos
        show_info "Main\n ${endbranch} Base (Hit ENTER to see options again.)"
        ;;
      "Enable non-free")
        enable_nonfree_repos
        show_info "Main\n ${endbranch} Base (Hit ENTER to see options again.)"
        ;;
      "Upgrade Debian release")
        upgrade_debian_release
        show_info "Main\n ${endbranch} Base (Hit ENTER to see options again.)"
        ;;
      "Sudo insults")
        enable_sudo_insults
        show_info "Main\n ${endbranch} Base (Hit ENTER to see options again.)"
        ;;
      "Disable system beep")
        disable_beep
        show_info "Main\n ${endbranch} Base (Hit ENTER to see options again.)"
        ;;
      *)
        show_warning "Invalid option."
        show_info "Main\n ${endbranch} Base (Hit ENTER to see options again.)"
        ;;
    esac
  done
}
