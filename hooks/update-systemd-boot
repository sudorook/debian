#!/bin/bash

# SPDX-FileCopyrightText: 2017 - 2024 sudorook <daemon@nullcodon.com>
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

set -eu

function get_cmdline {
  local default
  local cmdline
  local efidir
  efidir="$(/usr/bin/bootctl -p)"
  if [ -f "${efidir}/loader/loader.conf" ]; then
    default=$(sed -n "s/^default\s\+\(.*\)/\1/p" "${efidir}/loader/loader.conf")
    if [ -f "${efidir}/loader/entries/${default}" ]; then
      cmdline=$(sed -n "s/^options\s\+\(.*\)/\1/p" "${efidir}/loader/entries/${default}")
    fi
  fi
  echo "${cmdline}"
}

function get_default {
  local default
  local current
  local new
  local efidir
  efidir="$(/usr/bin/bootctl -p)"
  if [ -f "${efidir}/loader/loader.conf" ]; then
    default=$(sed -n "s/^default\s\+\(.*\)/\1/p" "${efidir}/loader/loader.conf")
    current=$(sed -n "s/^linux\s\+\(.*\)/\1/p" "${efidir}/loader/entries/${default}")
  fi
  if [[ -n "${current}" ]]; then
    # for backported kernels...
    if [[ "${current}" =~ bpo ]]; then
      local kernels
      kernels=($(ls -r /boot/vmlinuz*bpo*))
      new=$(basename ${kernels[0]})
    # if using default kernel...
    elif [[ "${current}" =~ vmlinuz-[0-9]\.[0-9]+\.0-[0-9]+-[amd64|i386] ]]; then
      local version
      local kernels
      version="$(basename "${current}" | sed -n "s/vmlinuz-\([0-9\.-]\+\)-[0-9]\+-\(i386\|amd64\)/\1/p")"
      kernels=($(ls -r /boot/vmlinuz-${version}*))
      new=$(basename ${kernels[0]})
    # if using non-standard kernel, keep it if it still exists
    elif [ -f "/boot/$(basename "${current}")" ]; then
      new="$(basename "${current}")"
    # otherwise pick the first (lexicographically sorted) kernel
    else
      local kernels
      kernels=($(ls -r /boot/vmlinuz*))
      new=$(basename ${kernels[0]})
    fi
  else
    local kernels
    kernels=($(ls -r /boot/vmlinuz*))
    new=$(basename ${kernels[0]})
  fi
  echo "${new}"
}

function make_loader {
  local kernel
  local version
  local outfile
  local efidir
  efidir="$(/usr/bin/bootctl -p)"
  kernel="${1}"
  version="${kernel/vmlinuz-/}"
  version="${version/-amd64/}"
  version="${version/-i386/}"
  outfile="linux-${version}.conf"
  cat > "${efidir}/loader/loader.conf" << EOF
default	${outfile}
timeout	1
console-mode	max
editor	no
EOF
}

function make_entry {
  local kernel
  local version
  local cmdline
  local outfile
  local efidir
  efidir="$(/usr/bin/bootctl -p)"
  kernel="${1}"
  version="${kernel/vmlinuz-/}"
  version="${version/-amd64/}"
  version="${version/-i386/}"
  cmdline="${2}"
  outfile="linux-${version}.conf"

  cat > "${efidir}/loader/entries/${outfile}" << EOF
title	Debian, linux-${version}
linux	/${kernel}
initrd	/${kernel/vmlinuz/initrd.img}
options	${cmdline}
EOF
}

function clear_entries {
  local efidir
  efidir="$(/usr/bin/bootctl -p)"
  find "${efidir}/loader" -type f -name "*.conf" -delete
  find "${efidir}" -type f -name "vmlinuz*" -delete
  find "${efidir}" -type f -name "initrd.img*" -delete
}

if [ "$(/usr/bin/bootctl is-installed)" = "yes" ]; then
  DEFAULT="$(get_default)"
  CMDLINE="$(get_cmdline)"
  EFIDIR="$(/usr/bin/bootctl -p)"

  clear_entries
  for kernel in /boot/vmlinuz*; do
    cp -af "${kernel}" "${EFIDIR}/"
    cp -af "${kernel/vmlinuz/initrd.img}" "${EFIDIR}/"
    make_entry "$(basename "${kernel}")" "${CMDLINE}"
  done
  make_loader "${DEFAULT}"
fi
