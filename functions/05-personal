#! /bin/bash

# Debian (post-)install scripts
# Copyright (C) 2020
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

DIR="$(dirname "$0")"

# Globals
GTKTHEME="Arc-Dark"
PLASMATHEME="Arc-Dark"
ICONTHEME="Papirus-Dark"
FONT="Roboto"

function select_system_font {
  show_question "Select a font family:"

  local options=("Back" "Noto" "Roboto")
  local option
  select option in "${options[@]}"; do
    case "${option}" in
      "Back")
        return
        ;;
      "Noto")
        if dpkg -s fonts-noto > /dev/null 2>&1; then
          FONT="Noto"
        else
          show_warning "Font family ${option@Q} not found. Skipping."
        fi
        break
        ;;
      "Roboto")
        if dpkg -s fonts-roboto > /dev/null 2>&1; then
          FONT="Roboto"
        else
          show_warning "Font family ${option@Q} not found. Skipping."
        fi
        break
        ;;
      *)
        show_error "Font ${option@Q} not supported."
        exit 3
        ;;
    esac
  done

  set_system_font
}

function set_system_font {
  show_header "Setting system font to ${FONT@Q}."

  case "${FONT}" in
    "Roboto")
      if dpkg -s cinnamon > /dev/null 2>&1; then
        show_info "Setting fonts for Cinnamon desktop environment."

        # screensaver fonts
        gsettings set org.cinnamon.desktop.screensaver font-message "'Roboto 14'"
        gsettings set org.cinnamon.desktop.screensaver font-date "'Roboto 24'"
        gsettings set org.cinnamon.desktop.screensaver font-time "'Roboto 64'"

        # desktop environment fonts
        gsettings set org.cinnamon.desktop.interface font-name "'Roboto 10.3'"
        gsettings set org.nemo.desktop font "'Roboto 10.3'"
        gsettings set org.gnome.desktop.interface document-font-name "'Roboto 10.3'"

        # monospace font
        if grep -q "Jambo.*Mono" <(fc-list); then
          gsettings set org.gnome.desktop.interface monospace-font-name "'Jambo Mono 9.3'"
        else
          show_warning "Jambo Mono font not found. Falling back to Ubuntu Mono."
          if dpkg -s fonts-ubuntu > /dev/null 2>&1; then
            gsettings set org.gnome.desktop.interface monospace-font-name "'Ubuntu Mono 10.9'"
          else
            show_warning "Ubuntu font family missing..."
          fi
        fi

        # titlebar font
        gsettings set org.cinnamon.desktop.wm.preferences titlebar-font "'Roboto Medium 10.3'"
      fi

      if dpkg -s gnome-shell > /dev/null 2>&1; then
        show_info "Setting fonts for GNOME environment."

        # desktop environment fonts
        gsettings set org.gnome.desktop.wm.preferences titlebar-font "'Roboto Medium 10.3'"
        gsettings set org.gnome.desktop.interface document-font-name "'Roboto 10.3'"
        gsettings set org.gnome.desktop.interface font-name "'Roboto 10.3'"

        # gnome-shell font
        if [ -f "${HOME}/.local/share/themes/Adwaita/gnome-shell/gnome-shell.css" ]; then
          sed -i "s,font-size: [0-9\.]\+pt,font-size: 10.3pt,g" \
            "${HOME}/.local/share/themes/Adwaita/gnome-shell/gnome-shell.css"
        fi

        # monospace font
        if grep -q "Jambo.*Mono" <(fc-list); then
          gsettings set org.gnome.desktop.interface monospace-font-name "'Jambo Mono 9.3'"
        else
          show_warning "Jambo Mono font not found. Falling back to Ubuntu Mono."
          if dpkg -s fonts-ubuntu > /dev/null 2>&1; then
            gsettings set org.gnome.desktop.interface monospace-font-name "'Ubuntu Mono 10.9'"
          else
            show_warning "Ubuntu font family missing..."
          fi
        fi
      fi

      if dpkg -s plasma-desktop > /dev/null 2>&1; then
        kwriteconfig5 --file kdeglobals --group "General" --key "font" "Roboto,10,-1,5,50,0,0,0,0,0"
        kwriteconfig5 --file kdeglobals --group "General" --key "menuFont" "Roboto,10,-1,5,50,0,0,0,0,0"
        kwriteconfig5 --file kdeglobals --group "General" --key "smallestReadableFont" "Roboto,8,-1,5,50,0,0,0,0,0"
        kwriteconfig5 --file kdeglobals --group "General" --key "toolBarFont" "Roboto,10,-1,5,50,0,0,0,0,0"
        kwriteconfig5 --file kdeglobals --group "WM" --key "activeFont" "Roboto,10,-1,5,50,0,0,0,0,0"
        if grep -q "Jambo.*Mono" <(fc-list); then
          kwriteconfig5 --file kdeglobals --group "General" --key "fixed" "Jambo Mono,9,-1,5,50,0,0,0,0,0"
        else
          show_warning "Jambo Mono font not found. Falling back to Ubuntu Mono."
          if dpkg -s fonts-ubuntu > /dev/null 2>&1; then
            kwriteconfig5 --file kdeglobals --group "General" --key "fixed" "Ubuntu Mono,10,-1,5,50,0,0,0,0,0"
          else
            show_warning "Ubuntu font family missing..."
          fi
        fi
        if qdbus org.kde.KWin > /dev/null; then
          qdbus org.kde.KWin /KWin reconfigure
        fi
      fi
      ;;
    "Noto")
      if dpkg -s cinnamon > /dev/null 2>&1; then
        show_info "Setting fonts for Cinnamon desktop environment."

        # screensaver fonts
        gsettings set org.cinnamon.desktop.screensaver font-message "'Noto Sans 14'"
        gsettings set org.cinnamon.desktop.screensaver font-date "'Noto Sans 24'"
        gsettings set org.cinnamon.desktop.screensaver font-time "'Noto Sans 64'"

        # desktop environment fonts
        gsettings set org.cinnamon.desktop.interface font-name "'Noto Sans 10.3'"
        gsettings set org.nemo.desktop font "'Noto Sans 10.3'"
        gsettings set org.gnome.desktop.interface document-font-name "'Noto Sans 10.3'"

        # monospace font
        if grep -q "Jambo.*Mono" <(fc-list); then
          gsettings set org.gnome.desktop.interface monospace-font-name "'Jambo Mono 10.4'"
        else
          show_warning "Jambo Mono font not found. Falling back to Ubuntu Mono."
          if dpkg -s fonts-ubuntu > /dev/null 2>&1; then
            gsettings set org.gnome.desktop.interface monospace-font-name "'Ubuntu Mono 11.7'"
          else
            show_warning "Ubuntu font family missing..."
          fi
        fi

        # titlebar font
        gsettings set org.cinnamon.desktop.wm.preferences titlebar-font "'Noto Sans Medium 10.3'"
      fi

      if dpkg -s gnome-shell > /dev/null 2>&1; then
        show_info "Setting fonts for GNOME environment."

        # desktop environment fonts
        gsettings set org.gnome.desktop.wm.preferences titlebar-font "'Noto Sans Medium 10.3'"
        gsettings set org.gnome.desktop.interface document-font-name "'Noto Sans 10.3'"
        gsettings set org.gnome.desktop.interface font-name "'Noto Sans 10.3'"

        # gnome-shell font
        if [ -f "${HOME}/.local/share/themes/Adwaita/gnome-shell/gnome-shell.css" ]; then
          sed -i "s,font-size: [0-9\.]\+pt,font-size: 10.3pt,g" \
            "${HOME}/.local/share/themes/Adwaita/gnome-shell/gnome-shell.css"
        fi

        # monospace font
        if grep -q "Jambo.*Mono" <(fc-list); then
          gsettings set org.gnome.desktop.interface monospace-font-name "'Jambo Mono 10.4'"
        else
          show_warning "Jambo Mono font not found. Falling back to Ubuntu Mono."
          if dpkg -s fonts-ubuntu > /dev/null 2>&1; then
            gsettings set org.gnome.desktop.interface monospace-font-name "'Ubuntu Mono 11.7'"
          else
            show_warning "Ubuntu font family missing..."
          fi
        fi
      fi

      if dpkg -s plasma-shell > /dev/null 2>&1; then
        kwriteconfig5 --file kdeglobals --group "General" --key "font" "Noto Sans,10,-1,5,50,0,0,0,0,0"
        kwriteconfig5 --file kdeglobals --group "General" --key "menuFont" "Noto Sans,10,-1,5,50,0,0,0,0,0"
        kwriteconfig5 --file kdeglobals --group "General" --key "smallestReadableFont" "Noto Sans,8,-1,5,50,0,0,0,0,0"
        kwriteconfig5 --file kdeglobals --group "General" --key "toolBarFont" "Noto Sans,10,-1,5,50,0,0,0,0,0"
        kwriteconfig5 --file kdeglobals --group "WM" --key "activeFont" "Noto Sans,10,-1,5,50,0,0,0,0,0"
        if grep -q "Jambo.*Mono" <(fc-list); then
          kwriteconfig5 --file kdeglobals --group "General" --key "fixed" "Jambo Mono,10,-1,5,50,0,0,0,0,0"
        else
          show_warning "Jambo Mono font not found. Falling back to Ubuntu Mono."
          if dpkg -s fonts-ubuntu > /dev/null 2>&1; then
            kwriteconfig5 --file kdeglobals --group "General" --key "fixed" "Ubuntu Mono,11,-1,5,50,0,0,0,0,0"
          else
            show_warning "Ubuntu font family missing..."
          fi
        fi
        if qdbus org.kde.KWin > /dev/null; then
          qdbus org.kde.KWin /KWin reconfigure
        fi
      fi
      ;;
    *)
      show_error "Font ${FONT@Q} not supported."
      exit 3
      ;;
  esac
}

function set_icon_theme {
  show_header "Setting desktop icon theme to ${ICONTHEME@Q}."

  if dpkg -s cinnamon > /dev/null 2>&1; then
    show_info "Setting Cinnamon icon theme to ${ICONTHEME@Q}."
    gsettings set org.cinnamon.desktop.interface icon-theme "'${ICONTHEME}'"
  fi

  if dpkg -s gnome-shell > /dev/null 2>&1; then
    show_info "Setting GNOME icon theme to ${ICONTHEME@Q}."
    gsettings set org.gnome.desktop.interface icon-theme "'${ICONTHEME}'"
  fi

  if [ -e /usr/lib/x86_64-linux-gnu/plasma-changeicons ]; then
    show_info "Setting Plasma icon theme to ${ICONTHEME@Q}."
    /usr/lib/x86_64-linux-gnu/plasma-changeicons "${ICONTHEME}"
  fi
}

function set_gtk_theme {
  if dpkg -s cinnamon > /dev/null 2>&1; then
    show_info "Setting Cinnamon GTK theme to ${GTKTHEME@Q}."
    gsettings set org.cinnamon.desktop.interface gtk-theme "'${GTKTHEME}'"
    if [[ "${GTKTHEME}" =~ -Eta$ ]]; then
      gsettings set org.cinnamon.theme name "'${GTKTHEME%-*}'"
      gsettings set org.cinnamon.desktop.wm.preferences theme "'${GTKTHEME}'"
    elif [[ "${GTKTHEME}" =~ -Compact$ ]]; then
      gsettings set org.cinnamon.theme name "'${GTKTHEME%-*}'"
      gsettings set org.cinnamon.desktop.wm.preferences theme "'${GTKTHEME}'"
    elif [[ "${GTKTHEME}" =~ -Darker$ ]]; then
      gsettings set org.cinnamon.theme name "'${GTKTHEME%er}'"
    else
      gsettings set org.cinnamon.theme name "'${GTKTHEME}'"
    fi
  fi

  if dpkg -s gnome-shell > /dev/null 2>&1; then
    show_info "Setting GNOME GTK theme to ${GTKTHEME@Q}."
    gsettings set org.gnome.desktop.wm.preferences theme "'${GTKTHEME}'"
    if [[ "${GTKTHEME}" =~ dark ]]; then
      gsettings set org.gnome.desktop.interface color-scheme "'prefer-dark'"
    else
      gsettings set org.gnome.desktop.interface color-scheme "'default'"
    fi
    gsettings set org.gnome.desktop.interface gtk-theme "'${GTKTHEME}'"
    gnome-extensions enable "user-theme@gnome-shell-extensions.gcampax.github.com" || true
    gsettings set org.gnome.shell.extensions.user-theme name "'${GTKTHEME}'"
  fi

  if dpkg -s plasma-desktop > /dev/null 2>&1; then
    show_info "Setting Plasma GTK theme to ${GTKTHEME@Q}."
    if qdbus org.kde.GtkConfig > /dev/null; then
      qdbus org.kde.GtkConfig /GtkConfig org.kde.GtkConfig.setGtkTheme "${GTKTHEME}"
    fi
  fi

  set_config_key_value "${HOME}/.xprofile" "export GTK_THEME" "${GTKTHEME}"
  set_config_key_value \
    "${HOME}/.config/environment.d/envvars.conf" "GTK_THEME" "${GTKTHEME}"
}

function set_plasma_theme {
  show_header "Setting Plasma theme to ${PLASMATHEME@Q}."
  case "${PLASMATHEME,,}" in
    arc)
      plasma-apply-lookandfeel -a com.github.sudorook.arc
      qdbus org.kde.GtkConfig /GtkConfig org.kde.GtkConfig.setGtkTheme "Arc"
      kwriteconfig5 --file kdeglobals --group "KDE" --key "widgetStyle" "kvantum"
      kvantummanager --set Arc
      ;;
    arcdark | arc-dark)
      plasma-apply-lookandfeel -a com.github.sudorook.arc-dark
      qdbus org.kde.GtkConfig /GtkConfig org.kde.GtkConfig.setGtkTheme "Arc-Dark"
      kwriteconfig5 --file kdeglobals --group "KDE" --key "widgetStyle" "kvantum"
      kvantummanager --set ArcDark
      ;;
    arc-darker | arcdarker)
      plasma-apply-lookandfeel -a com.github.sudorook.arc-darker
      qdbus org.kde.GtkConfig /GtkConfig org.kde.GtkConfig.setGtkTheme "Arc-Darker"
      kwriteconfig5 --file kdeglobals --group "KDE" --key "widgetStyle" "kvantum"
      kvantummanager --set ArcDarker
      ;;
    breeze)
      plasma-apply-lookandfeel -a org.kde.breeze.desktop
      qdbus org.kde.GtkConfig /GtkConfig org.kde.GtkConfig.setGtkTheme "Breeze"
      kwriteconfig5 --file kdeglobals --group "KDE" --key "widgetStyle" "Breeze"
      ;;
    breeze-dark | breezedark)
      plasma-apply-lookandfeel -a org.kde.breezedark.desktop
      qdbus org.kde.GtkConfig /GtkConfig org.kde.GtkConfig.setGtkTheme "Breeze"
      kwriteconfig5 --file kdeglobals --group "KDE" --key "widgetStyle" "Breeze"
      ;;
    breeze-twilight | breezetwilight)
      plasma-apply-lookandfeel -a org.kde.breezetwilight.desktop
      qdbus org.kde.GtkConfig /GtkConfig org.kde.GtkConfig.setGtkTheme "Breeze"
      kwriteconfig5 --file kdeglobals --group "KDE" --key "widgetStyle" "Breeze"
      ;;
    materia)
      plasma-apply-lookandfeel -a com.github.sudorook.materia
      qdbus org.kde.GtkConfig /GtkConfig org.kde.GtkConfig.setGtkTheme "Materia"
      kwriteconfig5 --file kdeglobals --group "KDE" --key "widgetStyle" "kvantum"
      kvantummanager --set Materia
      ;;
    materiadark | materia-dark)
      plasma-apply-lookandfeel -a com.github.sudorook.materia-dark
      qdbus org.kde.GtkConfig /GtkConfig org.kde.GtkConfig.setGtkTheme "Materia-dark"
      kwriteconfig5 --file kdeglobals --group "KDE" --key "widgetStyle" "kvantum"
      kvantummanager --set MateriaDark
      ;;
    materialight | materia-light)
      plasma-apply-lookandfeel -a com.github.sudorook.materia-light
      qdbus org.kde.GtkConfig /GtkConfig org.kde.GtkConfig.setGtkTheme "Materia-light"
      kwriteconfig5 --file kdeglobals --group "KDE" --key "widgetStyle" "kvantum"
      kvantummanager --set MateriaLight
      ;;
  esac
}

function set_lightdm_theme {
  local lightdmgtkconf="/etc/lightdm/lightdm-gtk-greeter.conf"
  if dpkg -s lightdm-gtk-greeter > /dev/null 2>&1; then
    show_header "Setting LightDM login GTK theme to ${GTKTHEME@Q}."
    sudo sed -i "s/^#theme-name=$/theme-name=/g" ${lightdmgtkconf}
    sudo sed -i "s/^theme-name=.*/theme-name=${GTKTHEME}/g" ${lightdmgtkconf}
    sudo sed -i "s/^#icon-theme-name=$/icon-theme-name=/g" ${lightdmgtkconf}
    sudo sed -i "s/^icon-theme-name=.*$/icon-theme-name=${ICONTHEME}/g" ${lightdmgtkconf}
    if [[ "${FONT}" == "Noto" ]]; then
      if dpkg -s fonts-noto > /dev/null; then
        sudo sed -i "s/^#font-name=$/font-name=/g" ${lightdmgtkconf}
        sudo sed -i "s/^font-name=.*/font-name=Noto Sans/g" ${lightdmgtkconf}
      fi
    elif [[ "${FONT}" == "Roboto" ]]; then
      if dpkg -s fonts-roboto > /dev/null; then
        sudo sed -i "s/^#font-name=$/font-name=/g" ${lightdmgtkconf}
        sudo sed -i "s/^font-name=.*/font-name=Roboto/g" ${lightdmgtkconf}
      fi
    fi
    sudo sed -i "s/^#xft-hintstyle=$/xft-hintstyle=/g" ${lightdmgtkconf}
    sudo sed -i "s/^xft-hintstyle=.*$/xft-hintstyle=slight/g" ${lightdmgtkconf}
  else
    show_warning "LightDM GTK greeter not installed. Skipping."
  fi
}

function set_gdm_theme {
  local gtkthemedir
  if dpkg -s gdm3 > /dev/null 2>&1; then
    if [[ -d "/usr/local/share/themes/${GTKTHEME}" ]]; then
      gtkthemedir="/usr/local/share/themes/${GTKTHEME}"
    elif [[ -d "${HOME}/.local/share/themes/${GTKTHEME}" ]]; then
      gtkthemedir="${HOME}/.local/share/themes/${GTKTHEME}"
    elif [[ -d "${HOME}/.themes/${GTKTHEME}" ]]; then
      gtkthemedir="${HOME}/.themes/${GTKTHEME}"
    elif [[ -d "/usr/share/themes/${GTKTHEME}" ]]; then
      gtkthemedir="/usr/share/themes/${GTKTHEME}"
    else
      show_warning "GTK theme ${GTKTHEME@Q} not found. Skipping."
      return
    fi
    show_header "Setting GDM login theme to ${GTKTHEME@Q}."
    sudo cp -r "/usr/share/gnome-shell" "/usr/share/gnome-shell-$(date +%Y%m%d-%H%M%S)"
    if [[ "${GTKTHEME}" =~ ^Adapta ]] || [[ "${GTKTHEME}" =~ ^Plata ]]; then
      sudo cp -rf \
        "${gtkthemedir}"/gnome-shell/* \
        /usr/share/gnome-shell/
      sudo cp -f \
        "${gtkthemedir}"/gnome-shell/extensions/window-list/classic.css \
        /usr/share/gnome-shell/extensions/window-list@gnome-shell-extensions.gcampax.github.com/
      sudo cp -f \
        "${gtkthemedir}"/gnome-shell/extensions/window-list/stylesheet.css \
        /usr/share/gnome-shell/extensions/window-list@gnome-shell-extensions.gcampax.github.com/
    elif [[ "${GTKTHEME}" =~ ^Materia ]]; then
      sudo glib-compile-resources \
        --target="/usr/share/gnome-shell/gnome-shell-theme.gresource" \
        --sourcedir="${gtkthemedir}/gnome-shell" \
        "${gtkthemedir}/gnome-shell/gnome-shell-theme.gresource.xml"
    elif [[ "${GTKTHEME}" =~ ^Arc ]]; then
      if [[ "${GTKTHEME}" =~ Dark ]]; then
        if [ -f "${gtkthemedir}/gnome-shell/gnome-shell-theme-dark.gresource" ]; then
          sudo cp -f "${gtkthemedir}/gnome-shell/gnome-shell-theme-dark.gresource" \
            "/usr/share/gnome-shell/gnome-shell-theme.gresource"
        fi
      else
        if [ -f "${gtkthemedir}/gnome-shell/gnome-shell-theme.gresource" ]; then
          sudo cp -f "${gtkthemedir}/gnome-shell/gnome-shell-theme.gresource" \
            "/usr/share/gnome-shell/gnome-shell-theme.gresource"
        fi
      fi
    else
      show_warning "${GTKTHEME@Q} is unsupported."
    fi
  else
    show_warning "GDM is not installed. Skipping."
  fi
}

function set_sddm_theme {
  local sddmconf="/etc/sddm.conf.d/kde_settings.conf"
  if dpkg -s sddm > /dev/null 2>&1; then
    if [ -d "/usr/share/sddm/themes/${PLASMATHEME}" ]; then
      show_header "Setting SDDM login theme to ${PLASMATHEME@Q}."
      sudo kwriteconfig5 --file "${sddmconf}" --group Theme --key Current "${PLASMATHEME}"
      if [[ "${PLASMATHEME,,}" =~ ^breeze ]]; then
        sudo kwriteconfig5 --file "${sddmconf}" --group Theme --key CursorTheme "breeze_cursors"
      fi
      case "${FONT}" in
        Noto)
          if dpkg -s fonts-noto > /dev/null; then
            sudo kwriteconfig5 --file "${sddmconf}" --group Theme --key Font "Noto Sans,10,-1,5,50,0,0,0,0,0"
          fi
          ;;
        Roboto)
          if dpkg -s fonts-roboto > /dev/null; then
            sudo kwriteconfig5 --file "${sddmconf}" --group Theme --key Font "Roboto,10,-1,5,50,0,0,0,0,0"
          fi
          ;;
        *) ;;
      esac
    fi
  else
    show_warning "SDDM not installed. Skipping."
  fi
}

function set_bash_shell {
  local bashrc="${DIR}/dotfiles/bashrc"
  local bashprofile="${DIR}/dotfiles/bash_profile"

  if ! command -v bash > /dev/null 2>&1; then
    show_warning "bash not installed. Skipping."
    return
  fi

  if ! grep -q "bash" <(getent passwd "$(whoami)"); then
    show_info "Changing login shell to Bash. Provide your password."
    chsh -s /bin/bash
  else
    show_info "Default shell already set to bash."
  fi

  copy_config_file "${bashprofile}" "${HOME}/.bash_profile"
  copy_config_file "${bashrc}" "${HOME}/.bashrc"
}

function set_zsh_shell {
  local zshrc="${DIR}/dotfiles/zshrc"
  local p10krc="${DIR}/dotfiles/p10k"

  if ! command -v zsh > /dev/null 2>&1; then
    show_warning "zsh not installed. Skipping."
    return
  fi

  if ! grep -q "zsh" <(getent passwd "$(whoami)"); then
    show_info "Changing login shell to Zsh. Provide your password."
    chsh -s /bin/zsh
  else
    show_info "Default shell already set to zsh."
  fi

  mkdir -p "${HOME}/.local/share/zsh/site-functions"

  copy_config_file "${zshrc}" "${HOME}/.zshrc"
  copy_config_file "${p10krc}" "${HOME}/.p10k.zsh"
}

function set_login_shell {
  local options=(
    "Back"
    "bash"
    "zsh"
  )
  local option
  select option in "${options[@]}"; do
    case "${option}" in
      "Back")
        return
        ;;
      "bash")
        set_bash_shell
        break
        ;;
      "zsh")
        set_zsh_shell
        break
        ;;
    esac
  done
}

function set_dark_gtk {
  local gtksettings="${HOME}/.config/gtk-3.0/settings.ini"
  show_header "Setting global dark theme for gtk applications."
  local isgtkdark
  if grep ^gtk-application-prefer-dark-theme= "${gtksettings}" > /dev/null 2>&1; then
    isgtkdark=$(grep ^gtk-application-prefer-dark-theme= "${gtksettings}" | cut -d"=" -f2)
    if test "${isgtkdark}"; then
      show_info "Desktop is already set to use dark GTK variants."
    else
      sed -i "s/^gtk-application-prefer-dark-theme=${isgtkdark}$/gtk-application-prefer-dark-theme=1/g" "${gtksettings}"
    fi
  else
    if [ -f "${gtksettings}" ]; then
      echo "" >> "${gtksettings}"
    else
      mkdir -p "$(dirname "${gtksettings}")" && touch "${gtksettings}"
    fi
    echo "[Settings]" >> "${gtksettings}"
    echo "gtk-application-prefer-dark-theme=1" >> "${gtksettings}"
  fi
}

function import_cinnamon_dconf {
  local cinnamondconf="${DIR}/dconf/cinnamon.dconf"
  show_header "Importing Cinnamon dconf settings."
  dconf load / < "${cinnamondconf}"
  check_fail
  show_success "Cinnamon dconf settings imported."
}

function import_gnome_dconf {
  local gnomedconf="${DIR}/dconf/gnome.dconf"
  show_header "Importing GNOME dconf settings."
  dconf load / < "${gnomedconf}"
  check_fail
  show_success "GNOME dconf settings imported."
}

function import_kde_settings {
  show_header "Setting default Plasma behavior."

  show_info "Adding Cinnamon-like desktop shortcuts."
  kwriteconfig5 --file kglobalshortcutsrc --group "kwin" --key "Overview" "Ctrl+Alt+Up,Meta+W,Toggle Overview"
  kwriteconfig5 --file kglobalshortcutsrc --group "kwin" --key "ShowDesktopGrid" "Ctrl+Alt+Down	Meta+F8,Meta+F8,Show Desktop Grid"
  kwriteconfig5 --file kglobalshortcutsrc --group "kwin" --key "Switch to Next Desktop" "Ctrl+Alt+Right,,Switch to Next Desktop"
  kwriteconfig5 --file kglobalshortcutsrc --group "kwin" --key "Switch to Previous Desktop" "Ctrl+Alt+Left,,Switch to Previous Desktop"
  kwriteconfig5 --file kglobalshortcutsrc --group "kwin" --key "Window to Next Desktop" "Ctrl+Alt+Shift+Right,,Window to Next Desktop"
  kwriteconfig5 --file kglobalshortcutsrc --group "kwin" --key "Window to Previous Desktop" "Ctrl+Alt+Shift+Left,,Window to Previous Desktop"

  # Use 'Automatic' virtual destkop layout for overview, and display desktop name labels.
  kwriteconfig5 --file kwinrc --group "Effect-desktopgrid" --key "DesktopLayoutMode" "1"     # automatic
  kwriteconfig5 --file kwinrc --group "Effect-desktopgrid" --key "DesktopNameAlignment" "68"  # desktop names at bottom

  # Dim screen when in administer mode.
  kwriteconfig5 --file kwinrc --group "Plugins" --key "kwin4_effect_dimscreenEnabled" "true"

  # Change desktop viewer animations.
  kwriteconfig5 --file kwinrc --group "Plugins" --key "kwin4_effect_eyeonscreenEnabled" "true"
  kwriteconfig5 --file kwinrc --group "Plugins" --key "kwin4_effect_windowapertureEnabled" "false"

  # Don't focus alt-tab windows.
  kwriteconfig5 --file kwinrc --group "TabBox" --key "HighlightWindows" "false"

  # Move minimized windows to end of alt-tab list.
  kwriteconfig5 --file kwinrc --group "TabBox" --key "OrderMinimizedMode" "1"

  # Use thumbnail-grid for alt-tab switcher.
  kwriteconfig5 --file kwinrc --group "TabBox" --key "LayoutName" "thumbnail_grid"   # thumbnail grid

  # Increase delay for showing the alt-tab OSD.
  kwriteconfig5 --file kwinrc --group "TabBox" --key "DelayTime" "180"  # ?

  # Disable auto-mount login service.
  kwriteconfig5 --file kded5rc --group "Module-device_automounter" --key "autoload" "false"

  # Show workspace switcher OSD and adjust default settings.
  kwriteconfig5 --file kwinrc --group "Plugins" --key "desktopchangeosdEnabled" "true"
  kwriteconfig5 --file kwinrc --group "Windows" --key "RollOverDesktops" "true"
  kwriteconfig5 --file kwinrc --group "Plugins" --key "kwin4_effect_fadedesktopEnabled" "true"
  kwriteconfig5 --file kwinrc --group "Plugins" --key "slideEnabled" "false"
  kwriteconfig5 --file kwinrc --group "Script-desktopchangeosd" --key "PopupHideDelay" "300"  # speed up switcher OSD
  kwriteconfig5 --file kwinrc --group "Script-desktopchangeosd" --key "TextOnly" "true"

  # Disable software (Discover) search in krunner.
  kwriteconfig5 --file krunnerrc --group "Plugins" --key "appstreamEnabled" "false"

  # Increase notification time.
  kwriteconfig5 --file plasmanotifyrc --group "Notifications" --key "PopupTimeout" "10000"

  # Use 'smart' new window placement.
  kwriteconfig5 --file kwinrc --group "Windows" --key "Placement" "Smart"

  # Reduce window shadows in breeze theme.
  kwriteconfig5 --file breezerc --group "Common" --key "ShadowSize" "ShadowSmall"
  kwriteconfig5 --file breezerc --group "Common" --key "ShadowStrength" "64"

  # Make cursor waiting animation static.
  kwriteconfig5 --file klaunchrc --group "BusyCursorSettings" --key "Bouncing" "false"

  # Enable 'Night Color' to reduce blue light at night.
  kwriteconfig5 --file kwinrc --group "NightColor" --key "Active" "true"
  kwriteconfig5 --file kwinrc --group "NightColor" --key "DayTemperature" "5700"
  kwriteconfig5 --file kwinrc --group "NightColor" --key "NightTemperature" "2500"

  # Double-click to open.
  kwriteconfig5 --file kdeglobals --group "KDE" --key "SingleClick" "false"

  # Speed up global animations.
  kwriteconfig5 --file kdeglobals --group "KDE" --key "AnimationDurationFactor" "0.5"

  # Disable Baloo indexing of file contents.
  kwriteconfig5 --file baloofilerc --group "General" --key "only basic indexing" "true"

  # Disable plasma software update notifications.
  kwriteconfig5 --file PlasmaDiscoverUpdates --group "Global" --key "RequiredNotificationInterval" "1"  # need to convert to -1
  sed -i "s/^RequiredNotificationInterval=1$/RequiredNotificationInterval=-1/g" "${HOME}/.config/PlasmaDiscoverUpdates"

  # Disable top-left corner effect.
  kwriteconfig5 --file kwinrc --group "Effect-windowview" --key "BorderActivateAll" "9"

  # Remove desktop scrolling behavior.
  kwriteconfig5 --file plasma-org.kde.plasma.desktop-appletsrc --group "ActionPlugins" --group "0" --key "wheel:Vertical;NoModifier" --delete

  # List desktop shortcuts top-to-bottom.
  kwriteconfig5 --file plasma-org.kde.plasma.desktop-appletsrc --group "Containments" --group "1" --group "General" --key "arrangement" "1"

  # Disable folder preview in Desktop
  kwriteconfig5 --file plasma-org.kde.plasma.desktop-appletsrc --group "Containments" --group "1" --group "General" --key "previewPlugins" "appimagethumbnail,audiothumbnail,blenderthumbnail,comicbookthumbnail,cursorthumbnail,djvuthumbnail,ebookthumbnail,exrthumbnail,fontthumbnail,imagethumbnail,jpegthumbnail,kraorathumbnail,windowsexethumbnail,windowsimagethumbnail,mltpreview,mobithumbnail,opendocumentthumbnail,gsthumbnail,quithumbnail,rawthumbnail,svgthumbnail,ffmpegthumbs"

  # Disable screen dimming on idle.
  kwriteconfig5 --file powermanagementprofilesrc --group "AC" --group "DimDisplay" --key "idleTime" --delete
  kwriteconfig5 --file powermanagementprofilesrc --group "Battery" --group "DimDisplay" --key "idleTime" --delete
  kwriteconfig5 --file powermanagementprofilesrc --group "LowBattery" --group "DimDisplay" --key "idleTime" --delete
  kwriteconfig5 --file powermanagementprofilesrc --group "LowBattery" --group "BrightnessControl" --key "value" --delete

  # Change power notification settings.
  kwriteconfig5 --file powerdevil.notifyrc --group "Event/criticalbattery" --key "Execute" ""
  kwriteconfig5 --file powerdevil.notifyrc --group "Event/criticalbattery" --key "Logfile" ""
  kwriteconfig5 --file powerdevil.notifyrc --group "Event/criticalbattery" --key "TTS" ""

  kwriteconfig5 --file powerdevil.notifyrc --group "Event/fullbattery" --key "Action" "Popup"
  kwriteconfig5 --file powerdevil.notifyrc --group "Event/fullbattery" --key "Execute" ""
  kwriteconfig5 --file powerdevil.notifyrc --group "Event/fullbattery" --key "Logfile" ""
  kwriteconfig5 --file powerdevil.notifyrc --group "Event/fullbattery" --key "TTS" ""

  kwriteconfig5 --file powerdevil.notifyrc --group "Event/lowbattery" --key "Action" "Popup"
  kwriteconfig5 --file powerdevil.notifyrc --group "Event/lowbattery" --key "Execute" ""
  kwriteconfig5 --file powerdevil.notifyrc --group "Event/lowbattery" --key "Logfile" ""
  kwriteconfig5 --file powerdevil.notifyrc --group "Event/lowbattery" --key "TTS" ""

  kwriteconfig5 --file powerdevil.notifyrc --group "Event/lowperipheralbattery" --key "Action" "Popup"
  kwriteconfig5 --file powerdevil.notifyrc --group "Event/lowperipheralbattery" --key "Execute" ""
  kwriteconfig5 --file powerdevil.notifyrc --group "Event/lowperipheralbattery" --key "Logfile" ""
  kwriteconfig5 --file powerdevil.notifyrc --group "Event/lowperipheralbattery" --key "TTS" ""

  kwriteconfig5 --file powerdevil.notifyrc --group "Event/pluggedin" --key "Action" ""
  kwriteconfig5 --file powerdevil.notifyrc --group "Event/pluggedin" --key "Execute" ""
  kwriteconfig5 --file powerdevil.notifyrc --group "Event/pluggedin" --key "Logfile" ""
  kwriteconfig5 --file powerdevil.notifyrc --group "Event/pluggedin" --key "TTS" ""

  kwriteconfig5 --file powerdevil.notifyrc --group "Event/unplugged" --key "Action" ""
  kwriteconfig5 --file powerdevil.notifyrc --group "Event/unplugged" --key "Execute" ""
  kwriteconfig5 --file powerdevil.notifyrc --group "Event/unplugged" --key "Logfile" ""
  kwriteconfig5 --file powerdevil.notifyrc --group "Event/unplugged" --key "TTS" ""

  # Remove file size limit for Trash
  kwriteconfig5 --file ktrashrc --group "${HOME}/.local/share/Trash" --key "UseSizeLimit" "false"

  # Do not prompt to clear clipboard.
  kwriteconfig5 --file plasmashellrc --group "Notification Messages" --key "klipperClearHistoryAskAgain" "false"

  # Do not save non-text to clipboard.
  kwriteconfig5 --file klipperrc --group "General" --key "SelectionTextOnly" "false"

  # Dolphin settings.
  kwriteconfig5 --file dolphinrc --group "General" --key "GlobalViewProps" "false"  # enable per-directory view style (e.g. sort by name, date modified, etc.)
  kwriteconfig5 --file dolphinrc --group "General" --key "BrowseThroughArchives" "true"  # open archives as folders
  kwriteconfig5 --file kdeglobals --group "KDE" --key "ShowDeleteCommand" "true"  # show delete command in menu
  kwriteconfig5 --file kservicemenurc --group "Show" --key "runInKonsole" "false" # disable 'run in konsole' option in dolphin
  kwriteconfig5 --file kiorc --group "Confirmations" --key "ConfirmDelete" "false"
  kwriteconfig5 --file kiorc --group "Confirmations" --key "ConfirmEmptyTrash" "false"
  kwriteconfig5 --file dolphinrc --group "General" --key "ConfirmClosingMultipleTabs" "false"
  kwriteconfig5 --file dolphinrc --group "PreviewSettings" --key "Plugins" "appimagethumbnail,audiothumbnail,blenderthumbnail,comicbookthumbnail,cursorthumbnail,djvuthumbnail,ebookthumbnail,exrthumbnail,fontthumbnail,imagethumbnail,jpegthumbnail,kraorathumbnail,windowsexethumbnail,windowsimagethumbnail,mltpreview,mobithumbnail,opendocumentthumbnail,gsthumbnail,quithumbnail,rawthumbnail,svgthumbnail,ffmpegthumbs"  # disable folder image previews
  kwriteconfig5 --file dolphinrc --group "KFileDialog Settings" --key "Places Icons Auto-resize" "true"  # auto-resize the icons
  kwriteconfig5 --file dolphinrc --group "PlacesPanel" --key "IconSize" "1"  # change to -1 later
  sed -i "s/^IconSize=1$/IconSize=-1/g" "${HOME}/.config/dolphinrc"
  kwriteconfig5 --file dolphinrc --group "MainWindow" --group "Toolbar mainToolBar" --key "ToolButtonStyle" "IconOnly"  # icon-only menus in toolbar

  # Stop notification sound whem emptying trash.
  kwriteconfig5 --file plasma_workspace.notifyrc --group "Event/Trash: emptied" --key "Action" ""
  kwriteconfig5 --file plasma_workspace.notifyrc --group "Event/Trash: emptied" --key "Execute" ""
  kwriteconfig5 --file plasma_workspace.notifyrc --group "Event/Trash: emptied" --key "Logfile" ""
  kwriteconfig5 --file plasma_workspace.notifyrc --group "Event/Trash: emptied" --key "TTS" ""

  show_info "Adjusting Okular default settings."
  kwriteconfig5 --file okularrc --group "MainWindow" --group "Toolbar mainToolBar" --key "ToolButtonStyle" "IconOnly" # icons-only menus
  kwriteconfig5 --file okularrc --group "MainWindow" --key "MenuBar" "Disabled"
  kwriteconfig5 --file okularpartrc --group "PageView" --key "SmoothScrolling" "false"
  kwriteconfig5 --file okularpartrc --group "PageView" --key "TrimMargins" "true"
  kwriteconfig5 --file okularpartrc --group "Core Performance" --key "MemoryLevel" "Aggressive"

  show_info "Adjusting gwenview default settings."
  kwriteconfig5 --file gwenviewrc --group "ImageView" --key "AnimationMethod" "DocumentView::NoAnimation"
  kwriteconfig5 --file gwenviewrc --group "ImageView" --key "MouseWheelBehavior" "MouseWheelBehavior::Zoom"
  kwriteconfig5 --file gwenviewrc --group "ImageView" --key "EnlargeSmallerImages" "true"
  kwriteconfig5 --file gwenviewrc --group "ThumbnailView" --key "ListVideos" "false"

  # Because the Wayland protocol does not allow for global keylogging needed to
  # detect global shorcuts, shortcut handling for Plasma wayland is built
  # directly into KWin itself. On X11, KGlobalAccel handles this instead. The
  # consequence of this is that when running DESKTOP_SESSION=plasma, restarting
  # KGlobalAccel will update the shortcuts, but when
  # DESKTOP_SESSION=plasmawayland, KWin (and therefore the entire session)
  # needs to be restarted instead.
  #
  # See: https://blog.martin-graesslin.com/blog/2015/06/global-shortcut-handling-in-a-plasma-wayland-session/
  case "${DESKTOP_SESSION:-}" in
    plasma)
      if qdbus org.kde.KWin > /dev/null; then
        qdbus org.kde.KWin /KWin reconfigure
      fi
      kquitapp5 kglobalaccel ||
        killall kglobalaccel5 &&
        sleep 2s &&
        nohup kstart5 kglobalaccel5 --window --windowclass > /dev/null 2>&1
      ;;
    plasmawayland)
      if qdbus org.kde.KWin > /dev/null; then
        qdbus org.kde.KWin /KWin reconfigure
      fi
      kwin_wayland --replace
      ;;
  esac
  show_success "Done! Reload Plasma to update settings."
}

function import_apps_dconf {
  local appsdconf="${DIR}/dconf/apps.dconf"
  show_header "Importing application dconf settings."
  dconf load / < "${appsdconf}"
  check_fail
  show_success "Application dconf settings imported."
}

function import_terminal_dconf {
  local terminaldconf="${DIR}/dconf/terminal.dconf"
  show_header "Importing terminal profiles."
  dconf load / < "${terminaldconf}"
  check_fail
  show_success "GNOME terminal profiles imported."
}

function enable_autologin {
  local gdmconf="/etc/gdm3/daemon.conf" # Debian uses gdm3 instead of gdm
  local lightdmconf="/etc/lightdm/lightdm.conf"
  local sddmconf="/etc/sddm.conf.d/kde_settings.conf"

  show_header "Enabling automatic login for ${USER@Q}."
  local is_autologin_set=false

  if dpkg -s gdm3 > /dev/null 2>&1; then
    show_info "Log in as ${USER@Q} via GDM."
    ! [ -f ${gdmconf} ] && sudo touch ${gdmconf}
    if ! grep -q "^AutomaticLogin=${USER}" ${gdmconf}; then
      sudo sed -i "s/^#  AutomaticLogin = .*$/AutomaticLogin=${USER}/g" "${gdmconf}"
      sudo sed -i "s/^#  AutomaticLoginEnable = .*$/AutomaticLoginEnable=true/g" "${gdmconf}"
    else
      sudo sed -i "s/^AutomaticLogin=.*$/AutomaticLogin=${USER}/g" ${gdmconf}
      sudo sed -i "s/^AutomaticLoginEnable=.*$/AutomaticLoginEnable=true/g" ${gdmconf}
    fi
    is_autologin_set=true
  fi

  if dpkg -s lightdm > /dev/null 2>&1; then
    show_info "Log in as ${USER@Q} via LightDM."
    sudo sed -i "s/^#autologin-user=/autologin-user=/g" ${lightdmconf}
    sudo sed -i "s/^#autologin-user-timeout=/autologin-user-timeout=/g" ${lightdmconf}
    sudo sed -i "s/^autologin-user=.*$/autologin-user=${USER}/g" ${lightdmconf}
    is_autologin_set=true
  fi

  if dpkg -s sddm > /dev/null 2>&1; then
    show_info "Log in as ${USER@Q} via SDDM."
    if ! [ -d /etc/sddm.conf.d/ ]; then
      sudo mkdir /etc/sddm.conf.d/
      sudo touch "${sddmconf}"

      sudo kwriteconfig5 --file "${sddmconf}" --group Autologin --key Relogin "false"
      sudo kwriteconfig5 --file "${sddmconf}" --group Autologin --key Session "${DESKTOP_SESSION:-plasmawayland}"
      sudo kwriteconfig5 --file "${sddmconf}" --group Autologin --key User "${USER}"

      sudo kwriteconfig5 --file "${sddmconf}" --group General --key HaltCommand ""
      sudo kwriteconfig5 --file "${sddmconf}" --group General --key RebootCommand ""

      sudo kwriteconfig5 --file "${sddmconf}" --group Theme --key Current ""

      sudo kwriteconfig5 --file "${sddmconf}" --group Users --key MaximumUid 60000
      sudo kwriteconfig5 --file "${sddmconf}" --group Users --key MinimumUid 1000
    else
      sudo kwriteconfig5 --file "${sddmconf}" --group Autologin --key Relogin "false"
      sudo kwriteconfig5 --file "${sddmconf}" --group Autologin --key Session "${DESKTOP_SESSION:-plasmawayland}"
      sudo kwriteconfig5 --file "${sddmconf}" --group Autologin --key User "${USER}"
    fi
    is_autologin_set=true
  fi

  if "${is_autologin_set}"; then
    show_success "Autologin enabled."
  else
    show_warning "Failed to detect display manager. Autologin not enabled."
  fi
}

function invert_brightness {
  local grubdefault="/etc/default/grub"
  if [ -f "${grubdefault}" ]; then
    local oldline
    local bootparams
    oldline=$(grep ^GRUB_CMDLINE_LINUX= "${grubdefault}")
    bootparams=$(echo "${oldline}" | sed -n "s/^GRUB_CMDLINE_LINUX=\"\(.*\)\"/\1/p")
    show_header "Inverting display brightness (Intel i915)."
    if [[ ${bootparams} =~ i915.invert_brightness= ]]; then
      sudo sed -i "s|i915.invert_brightness=\(on\|off\|1\|0\)|i915.invert_brightness=1|g" ${grubdefault}
    else
      if test "${bootparams}"; then
        sudo sed -i "s|${bootparams}|${bootparams} i915.invert_brightness=1|g" ${grubdefault}
      else
        sudo sed -i "s|${oldline}|GRUB_CMDLINE_LINUX=\"i915.invert_brightness=1\"|g" ${grubdefault}
      fi
      sudo sed -i "\|^GRUB_CMDLINE_LINUX=| a\#${oldline}" ${grubdefault} # backup
      show_success "Brightness inverted."
      sudo update-grub
    fi
  fi
  if [[ "$(sudo bootctl is-installed)" = yes ]]; then
    local cmdline
    local entry
    for entry in "$(bootctl -p)"/loader/entries/*.conf; do
      cmdline=$(sed -n "s/^options\s\+\(.*\)/\1/p" "${entry}")
      if [[ ${cmdline} =~ i915.invert_brightness= ]]; then
        sudo sed -i "s|i915.invert_brightness=\(1\|0\)|i915.invert_brightness=1|g" "${entry}"
      else
        if test "${cmdline}"; then
          sudo sed -i "s|${cmdline}|${cmdline} i915.invert_brightness=1|g" ${grubdefault}
        else
          echo "options	i915.invert_brightness=1" | sudo tee -a "${entry}"
        fi
      fi
    done
  fi
}

function enable_intel_iommu {
  local grubdefault="/etc/default/grub"
  local grubcfg="/boot/grub/grub.cfg"
  local vendor
  vendor="$(lscpu | sed -n "s,^Vendor ID: \+\([A-Za-z]\+\),\1,p")"
  if [[ "$vendor" =~ "Intel" ]]; then
    show_info "Setting Intel IOMMU kernel parameter."
    if [ -f "${grubdefault}" ]; then
      local oldline
      local bootparams
      oldline=$(grep ^GRUB_CMDLINE_LINUX= "${grubdefault}")
      bootparams=$(echo "${oldline}" | sed -n "s/^GRUB_CMDLINE_LINUX=\"\(.*\)\"/\1/p")
      if [[ ${bootparams} =~ intel_iommu= ]]; then
        sudo sed -i "s|intel_iommu=\(on\|off\|0\|1\)|intel_iommu=on|g" ${grubdefault}
      else
        if test "${bootparams}"; then
          sudo sed -i "s|${bootparams}|${bootparams} intel_iommu=on|g" ${grubdefault}
        else
          sudo sed -i "s|${oldline}|GRUB_CMDLINE_LINUX=\"intel_iommu=on\"|g" ${grubdefault}
        fi
        sudo sed -i "\|^GRUB_CMDLINE_LINUX=| a\#${oldline}" ${grubdefault} # backup
        sudo grub-mkconfig -o ${grubcfg}
      fi
    fi
    if [[ "$(sudo bootctl is-installed)" = yes ]]; then
      local cmdline
      local entry
      for entry in "$(bootctl -p)"/loader/entries/*.conf; do
        cmdline=$(sed -n "s/^options\s\+\(.*\)/\1/p" "${entry}")
        if [[ ${cmdline} =~ intel_iommu= ]]; then
          sudo sed -i "s|intel_iommu=\(1\|0\)|intel_iommu=on|g" "${entry}"
        else
          if test "${cmdline}"; then
            sudo sed -i "s|${cmdline}|${cmdline} intel_iommu=on|g" ${grubdefault}
          else
            echo "options	intel_iommu=on" | sudo tee -a "${entry}"
          fi
        fi
      done
    fi
  else
    show_warning "Cannot set intel_iommu=on on non-Intel CPU. Skipping."
  fi
}

function disable_pulseaudio_suspend {
  local pulseconfig="/etc/pulse/default.pa"
  show_header "Disabling suspend on PulseAudio when sinks/sources idle."
  if [ -f ${pulseconfig} ]; then
    sudo sed -i "s/^load-module module-suspend-on-idle$/#load-module module-suspend-on-idle/g" ${pulseconfig}
  else
    show_warning "PulseAudio config file missing. Skipping."
  fi
}

function disable_11n {
  local iwlwificonf="/etc/modprobe.d/iwlwifi.conf"
  show_header "Disabling 802.11n networking in iwlwifi."
  if ! [ "$(ls -A /etc/modprobe.d/)" ]; then
    sudo sh -c "echo 'options iwlwifi 11n_disable=1' >> ${iwlwificonf}"
  else
    if ! find /etc/modprobe.d/ -type f \
         -exec grep "^options iwlwifi .*11n_disable=1.*" {} + > /dev/null 2>&1; then
      sudo sh -c "echo 'options iwlwifi 11n_disable=1' >> ${iwlwificonf}"
    else
      show_info "11n_disable=1 flag is already set."
    fi
  fi
  show_success "802.11n networking disabled in ${iwlwificonf@Q}."
}

function install_scripts {
  local autostartdir="${HOME}/.config/autostart"
  local scriptdir="${HOME}/.scripts"
  local batterydaemon="${DIR}/daemons/battery.desktop"

  show_header "Installing misc. scripts to the ${scriptdir@Q} folder."
  if [ -d "${HOME}/.scripts" ]; then
    git -C "${HOME}/.scripts" pull
  else
    git clone https://github.com/sudorook/misc-scripts.git "${scriptdir}"
    show_info "Be sure to populate '${scriptdir}/globals'."
  fi
  show_success "Installed."

  show_info "Setting up battery notifications."
  mkdir -p "${autostartdir}"
  sed -e "s,@misc-scripts@,${scriptdir},g" "${batterydaemon}" \
    > "${autostartdir}/battery-watchdog.desktop"
}

function select_gtk_theme {
  show_question "Select a GTK theme:"

  local options=(
    "Back"
    "Adwaita"
    "Adwaita-dark"
    "Arc"
    "Arc-Darker"
    "Arc-Dark"
    "Arc-Lighter"
    "Adapta"
    "Adapta-Eta"
    "Adapta-Nokto"
    "Adapta-Nokto-Eta"
    "Materia"
    "Materia-compact"
    "Materia-dark"
    "Materia-dark-compact"
    "Materia-light"
    "Materia-light-compact"
    "Plata"
    "Plata-Compact"
    "Plata-Lumine"
    "Plata-Lumine-Compact"
    "Plata-Noir"
    "Plata-Noir-Compact")
  local option
  select option in "${options[@]}"; do
    case "${option}" in
      "Back")
        return
        ;;
      "Adwaita")
        if [ -d /usr/share/themes/Adwaita ]; then
          GTKTHEME="Adwaita"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Adwaita-dark")
        if [ -d /usr/share/themes/Adwaita-dark ]; then
          GTKTHEME="Adwaita-dark"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Arc")
        if [ -d /usr/share/themes/Arc ] ||
           [ -d /usr/local/share/themes/Arc ] ||
           [ -d "${HOME}/.local/share/themes/Arc" ] ||
           [ -d "${HOME}/.themes/Arc" ]; then
          GTKTHEME="Arc"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Arc-Darker")
        if [ -d /usr/share/themes/Arc-Darker ] ||
           [ -d /usr/local/share/themes/Arc-Darker ] ||
           [ -d "${HOME}/.local/share/themes/Arc-Darker" ] ||
           [ -d "${HOME}/.themes/Arc-Darker" ]; then
          GTKTHEME="Arc-Darker"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Arc-Dark")
        if [ -d /usr/share/themes/Arc-Dark ] ||
           [ -d /usr/local/share/themes/Arc-Dark ] ||
           [ -d "${HOME}/.local/share/themes/Arc-Dark" ] ||
           [ -d "${HOME}/.themes/Arc-Dark" ]; then
          GTKTHEME="Arc-Dark"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Arc-Lighter")
        if [ -d /usr/share/themes/Arc-Lighter ] ||
           [ -d /usr/local/share/themes/Arc-Lighter ] ||
           [ -d "${HOME}/.local/share/themes/Arc-Lighter" ] ||
           [ -d "${HOME}/.themes/Arc-Lighter" ]; then
          GTKTHEME="Arc-Lighter"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Adapta")
        if [ -d /usr/share/themes/Adapta ] ||
           [ -d /usr/local/share/themes/Adapta ] ||
           [ -d "${HOME}/.local/share/themes/Adapta" ] ||
           [ -d "${HOME}/.themes/Adapta" ]; then
          GTKTHEME="Adapta"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Adapta-Eta")
        if [ -d /usr/share/themes/Adapta-Eta ] ||
           [ -d /usr/local/share/themes/Adapta-Eta ] ||
           [ -d "${HOME}/.local/share/themes/Adapta-Eta" ] ||
           [ -d "${HOME}/.themes/Adapta-Eta" ]; then
          GTKTHEME="Adapta-Eta"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Adapta-Nokto")
        if [ -d /usr/share/themes/Adapta-Nokto ] ||
           [ -d /usr/local/share/themes/Adapta-Nokto ] ||
           [ -d "${HOME}/.local/share/themes/Adapta-Nokto" ] ||
           [ -d "${HOME}/.themes/Adapta-Nokto" ]; then
          GTKTHEME="Adapta-Nokto"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Adapta-Nokto-Eta")
        if [ -d /usr/share/themes/Adapta-Nokto-Eta ] ||
           [ -d /usr/local/share/themes/Adapta-Nokto-Eta ] ||
           [ -d "${HOME}/.local/share/themes/Adapta-Nokto-Eta" ] ||
           [ -d "${HOME}/.themes/Adapta-Nokto-Eta" ]; then
          GTKTHEME="Adapta-Nokto-Eta"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Materia")
        if [ -d /usr/share/themes/Materia ] ||
           [ -d /usr/local/share/themes/Materia ] ||
           [ -d "${HOME}/.local/share/themes/Materia" ] ||
           [ -d "${HOME}/.themes/Materia" ]; then
          GTKTHEME="Materia"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Materia-compact")
        if [ -d /usr/share/themes/Materia-compact ] ||
           [ -d /usr/local/share/themes/Materia-compact ] ||
           [ -d "${HOME}/.local/share/themes/Materia-compact" ] ||
           [ -d "${HOME}/.themes/Materia-compact" ]; then
          GTKTHEME="Materia-compact"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Materia-light")
        if [ -d /usr/share/themes/Materia-light ] ||
           [ -d /usr/local/share/themes/Materia-light ] ||
           [ -d "${HOME}/.local/share/themes/Materia-light" ] ||
           [ -d "${HOME}/.themes/Materia-light" ]; then
          GTKTHEME="Materia-light"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Materia-light-compact")
        if [ -d /usr/share/themes/Materia-light-compact ] ||
           [ -d /usr/local/share/themes/Materia-light-compact ] ||
           [ -d "${HOME}/.local/share/themes/Materia-light-compact" ] ||
           [ -d "${HOME}/.themes/Materia-light-compact" ]; then
          GTKTHEME="Materia-light-compact"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Materia-dark")
        if [ -d /usr/share/themes/Materia-dark ] ||
           [ -d /usr/local/share/themes/Materia-dark ] ||
           [ -d "${HOME}/.local/share/themes/Materia-dark" ] ||
           [ -d "${HOME}/.themes/Materia-dark" ]; then
          GTKTHEME="Materia-dark"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Materia-dark-compact")
        if [ -d /usr/share/themes/Materia-dark-compact ] ||
           [ -d /usr/local/share/themes/Materia-dark-compact ] ||
           [ -d "${HOME}/.local/share/themes/Materia-dark-compact" ] ||
           [ -d "${HOME}/.themes/Materia-dark-compact" ]; then
          GTKTHEME="Materia-dark-compact"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Plata")
        if [ -d /usr/share/themes/Plata ] ||
           [ -d /usr/local/share/themes/Plata ] ||
           [ -d "${HOME}/.local/share/themes/Plata" ] ||
           [ -d "${HOME}/.themes/Plata" ]; then
          GTKTHEME="Plata"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Plata-Compact")
        if [ -d /usr/share/themes/Plata-Compact ] ||
           [ -d /usr/local/share/themes/Plata-Compact ] ||
           [ -d "${HOME}/.local/share/themes/Plata-Compact" ] ||
           [ -d "${HOME}/.themes/Plata-Compact" ]; then
          GTKTHEME="Plata-Compact"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Plata-Lumine")
        if [ -d /usr/share/themes/Plata-Lumine ] ||
           [ -d /usr/local/share/themes/Plata-Lumine ] ||
           [ -d "${HOME}/.local/share/themes/Plata-Lumine" ] ||
           [ -d "${HOME}/.themes/Plata-Lumine" ]; then
          GTKTHEME="Plata-Lumine"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Plata-Lumine-Compact")
        if [ -d /usr/share/themes/Plata-Lumine-Compact ] ||
           [ -d /usr/local/share/themes/Plata-Lumine-Compact ] ||
           [ -d "${HOME}/.local/share/themes/Plata-Lumine-Compact" ] ||
           [ -d "${HOME}/.themes/Plata-Lumine-Compact" ]; then
          GTKTHEME="Plata-Lumine-Compact"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Plata-Noir")
        if [ -d /usr/share/themes/Plata-Noir ] ||
           [ -d /usr/local/share/themes/Plata-Noir ] ||
           [ -d "${HOME}/.local/share/themes/Plata-Noir" ] ||
           [ -d "${HOME}/.themes/Plata-Noir" ]; then
          GTKTHEME="Plata-Noir"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Plata-Noir-Compact")
        if [ -d /usr/share/themes/Plata-Noir-Compact ] ||
           [ -d /usr/local/share/themes/Plata-Noir-Compact ] ||
           [ -d "${HOME}/.local/share/themes/Plata-Noir-Compact" ] ||
           [ -d "${HOME}/.themes/Plata-Noir-Compact" ]; then
          GTKTHEME="Plata-Noir-Compact"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      *)
        show_warning "Invalid option ${option@Q}."
        ;;
    esac
  done

  set_gtk_theme
  set_lightdm_theme
  set_gdm_theme
}

function select_plasma_theme {
  show_question "Select a Plasma theme:"

  local options=(
    "Back"
    "Arc"
    "Arc-Dark"
    "Arc-Darker"
    "Breeze"
    "Breeze-dark"
    "Breeze-twilight"
    "Materia"
    "Materia-dark"
    "Materia-light")
  local option
  select option in "${options[@]}"; do
    case "${option}" in
      "Back")
        return
        ;;
      "Arc")
        if [ -d /usr/share/plasma/look-and-feel/com.github.sudorook.arc/ ] ||
           [ -d /usr/local/share/plasma/look-and-feel/com.github.sudorook.arc/ ]; then
          PLASMATHEME="Arc"
          GTKTHEME="Arc"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Arc-Darker")
        if [ -d /usr/share/plasma/look-and-feel/com.github.sudorook.arc-darker ] ||
           [ -d /usr/local/share/plasma/look-and-feel/com.github.sudorook.arc-darker ]; then
          PLASMATHEME="Arc-Darker"
          GTKTHEME="Arc-Dark"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Arc-Dark")
        if [ -d /usr/share/plasma/look-and-feel/com.github.sudorook.arc-dark ] ||
           [ -d /usr/local/share/plasma/look-and-feel/com.github.sudorook.arc-dark ]; then
          PLASMATHEME="Arc-Dark"
          GTKTHEME="Arc-Dark"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Breeze")
        if [ -d /usr/share/plasma/look-and-feel/org.kde.breeze.desktop ] ||
           [ -d /usr/local/share/plasma/look-and-feel/org.kde.breeze.desktop ]; then
          PLASMATHEME="breeze"
          GTKTHEME="Breeze"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Breeze-dark")
        if [ -d /usr/share/plasma/look-and-feel/org.kde.breezedark.desktop ] ||
           [ -d /usr/local/share/plasma/look-and-feel/org.kde.breezedark.desktop ]; then
          PLASMATHEME="breeze-dark"
          GTKTHEME="Breeze"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Breeze-twilight")
        if [ -d /usr/share/plasma/look-and-feel/org.kde.breezetwilight.desktop ] ||
           [ -d /usr/local/share/plasma/look-and-feel/org.kde.breezetwilight.desktop ]; then
          PLASMATHEME="breeze-twilight"
          GTKTHEME="Breeze"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Materia")
        if [ -d /usr/share/plasma/desktoptheme/Materia ] ||
           [ -d /usr/local/share/plasma/desktoptheme/Materia ]; then
          PLASMATHEME="Materia"
          GTKTHEME="Materia"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Materia-light")
        if [ -d /usr/share/plasma/desktoptheme/Materia-light ] ||
           [ -d /usr/local/share/plasma/desktoptheme/Materia-light ]; then
          PLASMATHEME="Materia-light"
          GTKTHEME="Materia-light"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      "Materia-dark")
        if [ -d /usr/share/plasma/desktoptheme/Materia-dark ] ||
           [ -d /usr/local/share/plasma/desktoptheme/Materia-dark ]; then
          PLASMATHEME="Materia-dark"
          GTKTHEME="Materia-dark"
          break
        else
          show_warning "${option@Q} theme is not installed."
        fi
        ;;
      *)
        show_warning "Invalid option ${option@Q}."
        ;;
    esac
  done

  set_plasma_theme
  set_gtk_theme
  set_sddm_theme
}

function select_icon_theme {
  show_question "Select an icon theme:"

  local options=(
    "Back"
    "Breeze"
    "Breeze-Dark"
    "Papirus"
    "ePapirus"
    "ePapirus-Dark"
    "Papirus-Light"
    "Papirus-Dark"
    "Papirus-Adapta"
    "Papirus-Adapta-Nokto")
  local option
  select option in "${options[@]}"; do
    case "${option}" in
      "Back")
        return
        ;;
      "Breeze")
        if [ -d /usr/share/icons/breeze ]; then
          ICONTHEME="breeze"
          break
        else
          show_warning "${option@Q} icons are not installed."
        fi
        ;;
      "Breeze-Dark")
        if [ -d /usr/share/icons/breeze-dark ]; then
          ICONTHEME="breeze-dark"
          break
        else
          show_warning "${option@Q} icons are not installed."
        fi
        ;;
      "Papirus")
        if [ -d /usr/share/icons/Papirus ] ||
           [ -d /usr/local/share/icons/Papirus ] ||
           [ -d "${HOME}/.local/share/icons/Papirus" ] ||
           [ -d "${HOME}/.icons/Papirus" ]; then
          ICONTHEME="Papirus"
          break
        else
          show_warning "${option@Q} icons are not installed."
        fi
        ;;
      "ePapirus")
        if [ -d /usr/share/icons/ePapirus ] ||
           [ -d /usr/local/share/icons/ePapirus ] ||
           [ -d "${HOME}/.local/share/icons/ePapirus" ] ||
           [ -d "${HOME}/.icons/ePapirus" ]; then
          ICONTHEME="ePapirus"
          break
        else
          show_warning "${option@Q} icons are not installed."
        fi
        ;;
      "ePapirus-Dark")
        if [ -d /usr/share/icons/ePapirus-Dark ] ||
           [ -d /usr/local/share/icons/ePapirus-Dark ] ||
           [ -d "${HOME}/.local/share/icons/ePapirus-Dark" ] ||
           [ -d "${HOME}/.icons/ePapirus-Dark" ]; then
          ICONTHEME="ePapirus-Dark"
          break
        else
          show_warning "${option@Q} icons are not installed."
        fi
        ;;
      "Papirus-Light")
        if [ -d /usr/share/icons/Papirus-Light ] ||
           [ -d /usr/local/share/icons/Papirus-Light ] ||
           [ -d "${HOME}/.local/share/icons/Papirus-Light" ] ||
           [ -d "${HOME}/.icons/Papirus-Light" ]; then
          ICONTHEME="Papirus-Light"
          break
        else
          show_warning "${option@Q} icons are not installed."
        fi
        ;;
      "Papirus-Dark")
        if [ -d /usr/share/icons/Papirus-Dark ] ||
           [ -d /usr/local/share/icons/Papirus-Dark ] ||
           [ -d "${HOME}/.local/share/icons/Papirus-Dark" ] ||
           [ -d "${HOME}/.icons/Papirus-Dark" ]; then
          ICONTHEME="Papirus-Dark"
          break
        else
          show_warning "${option@Q} icons are not installed."
        fi
        ;;
      "Papirus-Adapta")
        if [ -d /usr/share/icons/Papirus-Adapta ] ||
           [ -d /usr/local/share/icons/Papirus-Adapta ] ||
           [ -d "${HOME}/.local/share/icons/Papirus-Adapta" ] ||
           [ -d "${HOME}/.icons/Papirus-Adapta" ]; then
          ICONTHEME="Papirus-Adapta"
          break
        else
          show_warning "${option@Q} icons are not installed."
        fi
        ;;
      "Papirus-Adapta-Nokto")
        if [ -d /usr/share/icons/Papirus-Adapta-Nokto ] ||
           [ -d /usr/local/share/icons/Papirus-Adapta-Nokto ] ||
           [ -d "${HOME}/.local/share/icons/Papirus-Adapta-Nokto" ] ||
           [ -d "${HOME}/.icons/Papirus-Adapta-Nokto" ]; then
          ICONTHEME="Papirus-Adapta-Nokto"
          break
        else
          show_warning "${option@Q} icons are not installed."
        fi
        ;;
      *)
        show_warning "Invalid option ${option@Q}."
        ;;
    esac
  done

  set_icon_theme
  set_lightdm_theme
}

function 05-personal {
  show_question "Personal: what do you want to set?"
  show_info "Main\n ${ENDBRANCH} Personal (Hit ENTER to see options again.)"

  local options=(
    "Back"
    "All"
    "Select system fonts"
    "Select icon theme"
    "Select GTK theme"
    "Select Plasma theme"
    "Set dark GTK"
    "Select login shell"
    "Import Cinnamon dconf"
    "Import GNOME dconf"
    "Import KDE settings"
    "Import application dconf"
    "Import GNOME terminal profiles"
    "Enable autologin"
    "Invert brightness (i915)"
    "Enable IOMMU (Intel)"
    "Disable PulseAudio suspend"
    "Disable 802.11n"
    "Add scripts")
  local option
  select option in "${options[@]}"; do
    case "${option}" in
      "Back")
        break
        ;;
      "All")
        set_system_font
        set_icon_theme
        set_gtk_theme
        set_plasma_theme
        set_lightdm_theme
        set_gdm_theme
        set_sddm_theme
        set_dark_gtk
        set_login_shell
        import_cinnamon_dconf
        import_gnome_dconf
        import_kde_settings
        import_apps_dconf
        import_terminal_dconf
        enable_autologin
        invert_brightness
        enable_intel_iommu
        disable_pulseaudio_suspend
        disable_11n
        install_scripts
        show_info "Main\n ${ENDBRANCH} Personal (Hit ENTER to see options again.)"
        ;;
      "Select system fonts")
        select_system_font
        show_info "Main\n ${ENDBRANCH} Personal (Hit ENTER to see options again.)"
        ;;
      "Select icon theme")
        select_icon_theme
        show_info "Main\n ${ENDBRANCH} Personal (Hit ENTER to see options again.)"
        ;;
      "Select GTK theme")
        select_gtk_theme
        show_info "Main\n ${ENDBRANCH} Personal (Hit ENTER to see options again.)"
        ;;
      "Select Plasma theme")
        select_plasma_theme
        show_info "Main\n ${ENDBRANCH} Personal (Hit ENTER to see options again.)"
        ;;
      "Set dark GTK")
        set_dark_gtk
        show_info "Main\n ${ENDBRANCH} Personal (Hit ENTER to see options again.)"
        ;;
      "Select login shell")
        set_login_shell
        show_info "Main\n ${ENDBRANCH} Personal (Hit ENTER to see options again.)"
        ;;
      "Import Cinnamon dconf")
        import_cinnamon_dconf
        show_info "Main\n ${ENDBRANCH} Personal (Hit ENTER to see options again.)"
        ;;
      "Import KDE settings")
        import_kde_settings
        show_info "Main\n ${ENDBRANCH} Personal (Hit ENTER to see options again.)"
        ;;
      "Import GNOME dconf")
        import_gnome_dconf
        show_info "Main\n ${ENDBRANCH} Personal (Hit ENTER to see options again.)"
        ;;
      "Import application dconf")
        import_apps_dconf
        show_info "Main\n ${ENDBRANCH} Personal (Hit ENTER to see options again.)"
        ;;
      "Import GNOME terminal profiles")
        import_terminal_dconf
        show_info "Main\n ${ENDBRANCH} Personal (Hit ENTER to see options again.)"
        ;;
      "Enable autologin")
        enable_autologin
        show_info "Main\n ${ENDBRANCH} Personal (Hit ENTER to see options again.)"
        ;;
      "Invert brightness (i915)")
        invert_brightness
        show_info "Main\n ${ENDBRANCH} Personal (Hit ENTER to see options again.)"
        ;;
      "Enable IOMMU (Intel)")
        enable_intel_iommu
        show_info "Main\n ${ENDBRANCH} Personal (Hit ENTER to see options again.)"
        ;;
      "Disable PulseAudio suspend")
        disable_pulseaudio_suspend
        show_info "Main\n ${ENDBRANCH} Personal (Hit ENTER to see options again.)"
        ;;
      "Disable 802.11n")
        disable_11n
        show_info "Main\n ${ENDBRANCH} Network (Hit ENTER to see options again.)"
        ;;
      "Add scripts")
        install_scripts
        show_info "Main\n ${ENDBRANCH} Personal (Hit ENTER to see options again.)"
        ;;
      *)
        show_warning "Invalid option ${option@Q}."
        ;;
    esac
  done
}
