#! /bin/bash

# Debian (post-)install scripts
# Copyright (C) 2020
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


dir="$(dirname "$0")"

android="${dir}/packages/android.list"
function install_android {
  show_header "Installing tools for Android devices."
  check_installed "${android}"
  check_fail
  show_success "Android tools installed."
}

apps="${dir}/packages/apps.list"
mpvconfig="${dir}/configs/mpv.conf"
mpvinputconfig="${dir}/configs/mpv-input.conf"
libaoconf="/etc/libao.conf"
keepassxcini="${dir}/configs/keepassxc.ini"
function install_apps {
  show_header "Installing desktop applications."
  check_installed "${apps}"
  check_fail
  show_success "Applications installed."

  show_info "Copying mpv config."
  mkdir -p "${HOME}/.config/mpv"
  cp -f "${mpvconfig}" "${HOME}/.config/mpv/mpv.conf"
  cp -f "${mpvinputconfig}" "${HOME}/.config/mpv/input.conf"

  show_info "Setting application MIME associations."
  xdg-mime default firefox.desktop text/html
  xdg-mime default org.gnome.Evince.desktop application/pdf
  xdg-mime default org.gnome.eog.desktop image/bmp
  xdg-mime default org.gnome.eog.desktop image/gif
  xdg-mime default org.gnome.eog.desktop image/jpg
  xdg-mime default org.gnome.eog.desktop image/jpeg
  xdg-mime default org.gnome.eog.desktop image/png
  xdg-mime default org.gnome.eog.desktop image/svg+xml
  xdg-mime default org.gnome.eog.desktop image/tiff
  xdg-mime default transmission-gtk.desktop application/x-bittorrent
  xdg-mime default transmission-gtk.desktop x-scheme-handler/magnet

  show_info "Copying keepassxc config."
  mkdir -p "${HOME}/.config/keepassxc"
  cp -f "${keepassxcini}" "${HOME}/.config/keepassxc/"

  # Should always pass because gufw is in the app list.
  if command -v ufw >/dev/null; then
    show_info "Enabling Syncthing firewall rules."
    sudo ufw allow syncthing
    sudo ufw allow syncthing-gui
  fi

  show_info "Configuring ${libaoconf} to use PulseAudio instead of ALSA."
  sudo sh -c "echo 'default_driver=pulse' > ${libaoconf}"
}

codecs="${dir}/packages/codecs.list"
function install_codecs {
  show_header "Installing codecs."
  check_installed "${codecs}"
  check_fail
  show_success "Codecs installed."
}

dev="${dir}/packages/dev.list"
r="${dir}/packages/r.list"
npmrc="${dir}/dotfiles/npmrc"
rprofile="${dir}/dotfiles/Rprofile"
vimpack="${HOME}/.vim/pack/dist/start"
function install_dev {
  show_header "Installing languages, libraries, and tools for development."
  check_installed "${dev}"
  check_fail
  show_success "Development packages installed."

  show_info "Setting Git global defaults."
  git config --global init.defaultBranch master

  show_info "Installing npmrc."
  cp -f "${npmrc}" "${HOME}/.npmrc"

  show_info "Installing Rprofile."
  cp -f "${rprofile}" "${HOME}/.Rprofile"

  show_info "Setting up local lib dirs."
  mkdir -p "${HOME}/.local/lib"
  if [ -d "${HOME}/.local/lib64" ]; then
    mv "${HOME}/.local/lib64/*" "${HOME}/.local/lib/"
    rmdir "${HOME}/.local/lib64"
  fi
  ln -s "${HOME}/.local/lib" "${HOME}/.local/lib64"

  show_info "Installing R packages."
  check_installed "${r}"

  show_info "Setting default clang-format style."
  clang-format -style=mozilla -dump-config > "${HOME}/.clang-format"

  show_info "Installing Vim packages."
  mkdir -p "${vimpack}"

  if ! [[ -e "${vimpack}/kotlin-vim" ]]; then
    show_info "Installing kotlin-vim for Vim syntax highlighting."
    git clone https://github.com/udalov/kotlin-vim.git \
      "${vimpack}/kotlin-vim"
  fi

  if ! [[ -e "${vimpack}/Nvim-R" ]]; then
    show_info "Installing Nvim-R."
    git clone https://github.com/jalvesaq/Nvim-R.git "${vimpack}/Nvim-R"
  fi
}

extra="${dir}/packages/extra.list"
ytdlconf="${dir}/configs/ytdl.conf"
function install_extra {
  show_header "Installing extra desktop applications."
  check_installed "${extra}"
  check_fail
  show_success "Extra applications installed."

  show_info "Installing yt-dlp/youtube-dl config."
  mkdir -p "${HOME}/.config/yt-dlp"
  ln -s "${HOME}/.config/yt-dlp" "${HOME}/.config/youtube-dl"
  cp -f "${ytdlconf}" "${HOME}/.config/yt-dlp/config"
}

printer="${dir}/packages/printer.list"
function install_printing {
  show_header "Installing CPUS and printer firmware."
  check_installed "${printer}"
  check_fail
  show_success "Printing applications installed."
}

games="${dir}/packages/games.list"
function install_games {
  show_header "Installing game emulators."
  check_installed "${games}"
  check_fail
  show_success "Emulators installed."
}

kvm="${dir}/packages/kvm.list"
# qemuconf="/etc/libvirt/qemu.conf"
function install_kvm {
  show_header "Installing KVM."
  check_installed "${kvm}"
  check_fail
  show_success "KVM installed."

  show_info "Adding $(whoami) to kvm and libvirt groups."
  sudo usermod -aG kvm,libvirt "$(whoami)"

  # show_info "Enable dynamic ownership for qemu."
  # sudo sed -i "s/^#dynamic_ownership/dynamic_ownership/g" "${qemuconf}"

  # show_info "Set libvirt user to 'kvm' group in ${qemuconf}"
  # sudo sed -i "s/^group = \".*\"/group = \"kvm\"/g" "${qemuconf}"
  # show_warning \
  #   "Manually enable 'cgroup_device_acl' and add '/dev/dri/renderD128'" \
  #   "to the list so that the virt-manager GUI allows setting 3d acceleration."

  sudo systemctl enable libvirtd
  sudo systemctl start libvirtd
}

kvmguest="${dir}/packages/kvm-guest.list"
function install_kvm_guest {
  if grep "^flags.*\ hypervisor" /proc/cpuinfo >/dev/null 2>&1; then
    show_header "Installing tools for KVM guests."
    check_installed "${kvmguest}"
    check_fail
    show_success "KVM installed."

    # sudo systemctl enable qemu-guest-agent.service
    # sudo systemctl enable spice-vdagentd.service
  else
    show_warning "Not running on a virtualized machine. Skipping."
  fi
}

message="${dir}/packages/message.list"
weechatdir="${HOME}/.weechat"
function install_messaging {
  show_header "Installing messaging applications."
  check_installed "${message}"
  check_fail
  show_success "Messaging applications installed."

  show_info "Installing WeeChat plugin for Slack."
  mkdir -p "${weechatdir}/python/autoload"
  if [ -d "${weechatdir}/plugins/wee-slack" ]; then
    show_info "WeeChat plugin already installed."
  else
    git clone https://github.com/wee-slack/wee-slack.git \
      "${weechatdir}/plugins/wee-slack"
    ln -sf "${weechatdir}/plugins/wee-slack/wee_slack.py" \
      "${weechatdir}/python/autoload/"
  fi
  show_success "wee-slack plugin installed."
}

mingw="${dir}/packages/mingw.list"
function install_mingw {
  show_header "Installing MinGW for cross-platform compilation."
  check_installed "${mingw}"
  check_fail
  show_success "MinGW installed."
}

music="${dir}/packages/music.list"
beetsconf="${dir}/configs/beets.yaml"
beetsdir="${HOME}/.config/beets"
mpdconf="${dir}/configs/mpd.conf"
mpddir="${HOME}/.config/mpd"
ncmpcppconf="${dir}/configs/ncmpcpp.conf"
ncmpcppdir="${HOME}/.ncmpcpp"
function install_music {
  show_header "Installing music applications."
  check_installed "${music}"
  check_fail
  show_success "Music applications installed."

  show_info "Copying beets config."
  mkdir -p "${beetsdir}"
  cp -f "${beetsconf}" "${beetsdir}/config.yaml"

  show_info "Copying mpd config and enabling systemd user service."
  mkdir -p "${mpddir}"
  mkdir -p "${mpddir}/playlists"
  cp -f "${mpdconf}" "${mpddir}/mpd.conf"
  sudo systemctl stop mpd
  sudo systemctl stop mpd.socket
  sudo systemctl disable mpd
  sudo systemctl disable mpd.socket
  systemctl --user enable --now mpd

  show_info "Copying ncmpcpp config."
  mkdir -p "${ncmpcppdir}"
  cp -f "${ncmpcppconf}" "${ncmpcppdir}/config"
}

texlive="${dir}/packages/texlive.list"
function install_texlive {
  show_header "Installing TeX Live."
  check_installed "${texlive}"
  check_fail
  show_success "TeX Live installed."

  show_info "Changing the default local texmf path to ~/.texmf"
  local texmfconfig
  texmfconfig=$(kpsewhich texmf.cnf)
  mkdir -p "${HOME}/.texmf"
  sudo sed -i "s,^TEXMFHOME = .*$,TEXMFHOME = ~/.texmf,g" "${texmfconfig}"
}

torbrowser_path="${HOME}/.local/share/tor-browser"
local_applications="${HOME}/.local/share/applications"
function install_torbrowser {
  show_header "Installing Tor browser."

  local response
  local install_torbrowser
  if [ -d "${torbrowser_path}" ]; then
    show_warning "Tor browser is already installed in ${torbrowser_path}."
    response=$(ask_question "Replace? (y/N)")
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
      install_torbrowser=true
    else
      install_torbrowser=false
    fi
  else
    install_torbrowser=true
  fi

  if ${install_torbrowser}; then
    local torbrowser_version
    local torbrowser_package
    local torbrowser_url="https://www.torproject.org/dist/torbrowser"
    local arch

    show_info "Downloading Tor developers' GPG key."
    gpg --auto-key-locate nodefault,wkd --locate-keys torbrowser@torproject.org

    torbrowser_version=$(curl https://www.torproject.org/download/ | \
                         sed -n 's,^ \+<a class="downloadLink" href="/dist/torbrowser/\([0-9\.]\+\)/tor-browser-linux.*">,\1,p')
    arch=$(uname -m)
    if [ "${arch:(-2)}" = "86" ]; then
      torbrowser_package=tor-browser-linux32-${torbrowser_version}_en-US.tar.xz
    elif [ "${arch:(-2)}" = "64" ]; then
      torbrowser_package=tor-browser-linux64-${torbrowser_version}_en-US.tar.xz
    fi

    show_info "Downloading release tarball."
    wget "${torbrowser_url}/${torbrowser_version}/${torbrowser_package}"
    wget "${torbrowser_url}/${torbrowser_version}/${torbrowser_package}.asc"
    show_info "Extracting..."
    gpg --verify "${torbrowser_package}.asc" "${torbrowser_package}"
    tar xf "${torbrowser_package}"

    show_info "Putting things into place..."
    mkdir -p "${local_applications}"
    rm -rf "${torbrowser_path}"
    mv tor-browser_en-US "${torbrowser_path}"
    cp -f "${torbrowser_path}/start-tor-browser.desktop" "${local_applications}/"
    chmod -x "${local_applications}/start-tor-browser.desktop"
    sed -i \
      -e "s,^Name=.*,Name=Tor Browser,g" \
      -e "s,^Icon=.*,Icon=browser-tor,g" \
      -e "s,^Exec=.*,Exec=sh -c '\"${torbrowser_path}/Browser/start-tor-browser\" --detach || ([ !  -x \"${torbrowser_path}/Browser/start-tor-browser\" ] \&\& \"\$(dirname \"\$*\")\"/Browser/start-tor-browser --detach)' dummy %k,g" \
      "${local_applications}/start-tor-browser.desktop"
    update-desktop-database "${local_applications}"

    show_info "Cleaning up..."
    rm -f "${torbrowser_package}"
    rm -f "${torbrowser_package}.asc"
    show_success "Tor browser installed."
  else
    show_info "Skipping..."
  fi
}

vim="${dir}/packages/vim.list"
vimrc="${dir}/dotfiles/vimrc"
vimpack="${HOME}/.vim/pack/dist/start"
function install_vim {
  show_header "Installing Vim and Vim plugins."
  check_installed "${vim}"
  check_fail
  show_success "Vim and Vim plugins installed."

  show_info "Installing vimrc."
  cp -f "${vimrc}" "${HOME}/.vimrc"
  show_success "vimrc installed."

  mkdir -p "${vimpack}"

  show_info "Configuring active vim addons."
  # NOTE: DO NOT INSTALL AIRLINE FROM HERE!!!
  # It will be loaded automatically --- using vim-addons here will cause it to
  # be loaded twice.
  vim-addons install \
    align alternate ctrlp detectindent doxygen-toolkit fugitive \
    nerd-commenter pathogen surround syntastic tabular latex-suite \
    youcompleteme taglist julia ultisnips xmledit lastplace snippets

  git clone https://github.com/airblade/vim-gitgutter.git \
    "${vimpack}/vim-gitgutter"

  show_info "Setting Vim as default tool for git diffs and merges."
  # 00-check makes sure the git is installed, so no need for checks here.
  git config --global diff.tool vimdiff
  git config --global merge.tool vimdiff
  git config --global --add difftool.prompt false

  if command -v xdg-mime >/dev/null 2>&1; then
    show_info "Setting Vim MIME associations."
    xdg-mime default vim.desktop text/plain
  fi

  show_info "Install local wordlist."
  mkdir -p "${HOME}/.vim/spell"
  git clone --depth 1 https://github.com/sudorook/wordlist.vim wordlist.vim
  if [ -f "${HOME}/.vim/spell/en.utf-8.add" ]; then
    show_info "Wordlist already exists in ${HOME}/.vim/spell/. Appending."
    cat wordlist.vim/spell/en.utf-8.add >> "${HOME}/.vim/spell/en.utf-8.add"
    sort -u "${HOME}/.vim/spell/en.utf-8.add" > /tmp/temp-$$.add
    mv /tmp/temp-$$.add "${HOME}/.vim/spell/en.utf-8.add"
  else
    cp wordlist.vim/spell/en.utf-8.add "${HOME}/.vim/spell/en.utf-8.add"
  fi
  rm -rf wordlist.vim
  show_success "Wordlist installed in ${HOME}/.vim/spell."
  show_info "To use the wordlist, add the following to you vimrc:"
  show_info "  set spelllang=en"
  show_info "  set spellfile=\$HOME/.vim/spell/en.utf-8.add"
}

virtualbox="${dir}/packages/virtualbox.list"
function install_virtualbox {
  show_header "Installing VirtualBox."
  check_installed "${virtualbox}"
  check_fail
  show_success "VirtualBox installed."

  if getent group vboxusers; then
    show_info "Adding $(whoami) to vboxusers group."
    sudo usermod -aG vboxusers "$(whoami)"
  fi
}

virtualboxguest="${dir}/packages/virtualbox-guest.list"
function install_virtualbox_guest {
  if grep "^flags.*\ hypervisor" /proc/cpuinfo >/dev/null 2>&1; then
    show_header "Installing packages for VirtualBox guests."
    check_installed "${virtualboxguest}"
    check_fail
    show_success "VirtualBox guest packages installed."
  else
    show_warning "Not running on a virtualized machine. Skipping."
  fi
}

wine="${dir}/packages/wine.list"
function install_wine {
  show_header "Installing wine."
  check_installed "${wine}"
  check_fail
  show_success "Wine installed."
}

function 03-packages {
  show_question "Applications: what do you want to install?"
  show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"

  local options=(
    "Back"
    "All"
    "Android tools"
    "General applications"
    "Codecs"
    "Development"
    "Extra applications"
    "Emulators"
    "KVM (host)"
    "KVM (guest)"
    "Messaging"
    "MinGW"
    "Music"
    "Printing"
    "TeX Live"
    "Tor browser"
    "Vim"
    "VirtualBox (host)"
    "VirtualBox (guest)"
    "Wine")
  select option in "${options[@]}"; do
    case $option in
      "Back")
        break
        ;;
      "All")
        install_android
        install_apps
        install_codecs
        install_dev
        install_extra
        install_printing
        install_games
        install_kvm
        install_kvm_guest
        install_messaging
        install_mingw
        install_music
        install_texlive
        install_torbrowser
        install_vim
        install_virtualbox
        install_virtualbox_guest
        install_wine
        show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"
        ;;
      "Android tools")
        install_android
        show_info "Main\n ${endbranch} Misc (Hit ENTER to see options again.)"
        ;;
      "General applications")
        install_apps
        show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"
        ;;
      "Codecs")
        install_codecs
        show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"
        ;;
      "Development")
        install_dev
        show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"
        ;;
      "Extra applications")
        install_extra
        show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"
        ;;
      "Emulators")
        install_games
        show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"
        ;;
      "KVM (host)")
        install_kvm
        show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"
        ;;
      "KVM (guest)")
        install_kvm_guest
        show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"
        ;;
      "Messaging")
        install_messaging
        show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"
        ;;
      "MinGW")
        install_mingw
        show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"
        ;;
      "Music")
        install_music
        show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"
        ;;
      "Printing")
        install_printing
        show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"
        ;;
      "TeX Live")
        install_texlive
        show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"
        ;;
      "Tor browser")
        install_torbrowser
        show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"
        ;;
      "Vim")
        install_vim
        show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"
        ;;
      "VirtualBox (host)")
        install_virtualbox
        show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"
        ;;
      "VirtualBox (guest)")
        install_virtualbox_guest
        show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"
        ;;
      "Wine")
        install_wine
        show_info "Main\n ${endbranch} Apps (Hit ENTER to see options again.)"
        ;;
      *)
        show_warning "Invalid option."
        ;;
    esac
  done
}
