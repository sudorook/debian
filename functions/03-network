#! /bin/bash

# Debian (post-)install scripts
# Copyright (C) 2020
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

DIR="$(dirname "$0")"

function install_network {
  local networking="${DIR}/packages/network.list"
  local nmconf="/etc/NetworkManager/NetworkManager.conf"

  show_header "Setting up networking."
  check_installed "${networking}"
  check_fail
  show_success "Networking applications installed."

  show_info "Setting up MAC address randomization in Network Manager."
  if ! test "$(grep "mac-address=random" ${nmconf})"; then
    sudo sh -c "echo "" >> ${nmconf}"
    sudo sh -c "echo '# Enabling built-in MAC Address randomization' >> ${nmconf}"
    sudo sh -c "echo '[connection-mac-randomization]' >> ${nmconf}"
    sudo sh -c "echo 'wifi.cloned-mac-address=random' >> ${nmconf}"
    sudo sh -c "echo 'ethernet.cloned-mac-address=random' >> ${nmconf}"
  fi

  show_info "Disabling SSH root login and forcing SSH v2."
  sudo sed -i \
    -e "/^#PermitRootLogin prohibit-password$/a PermitRootLogin no" \
    -e "/^#Port 22$/i Protocol 2" \
    /etc/ssh/sshd_config
}

function install_discovery {
  local discovery="${DIR}/packages/discover.list"
  local nsconf="/etc/nsswitch.conf"

  show_header "Setting up local network discovery."
  check_installed "${discovery}"
  check_fail
  show_success "Discovery applications installed."

  show_info "Enabling local hostname resolution in Avahi."
  local oldhostsline="hosts: files mymachines myhostname resolve \[!UNAVAIL=return\] dns"
  local newhostsline="hosts: files mymachines myhostname mdns_minimal \[NOTFOUND=return\] resolve \[!UNAVAIL=return\] dns"
  sudo sed -i "/^${oldhostsline}/s/^${oldhostsline}/${newhostsline}/g" ${nsconf}
  sudo systemctl enable avahi-daemon.service
  sudo systemctl start avahi-daemon.service
}

function install_firewall {
  local firewall="${DIR}/packages/firewall.list"

  show_header "Setting up firewall."
  check_installed "${firewall}"
  check_fail
  show_success "Firewall packages installed."

  show_info "Setting ufw firewall rules."
  sudo ufw default deny

  if dpkg -s syncthing > /dev/null 2>&1; then
    sudo ufw allow syncthing
    sudo ufw allow syncthing-gui
  fi

  if dpkg -s kdeconnect > /dev/null 2>&1; then
    sudo ufw allow 'KDE Connect'
  fi

  if dpkg -s transmission-cli > /dev/null 2>&1; then
    sudo ufw allow Transmission
  elif dpkg -s transmission-qt > /dev/null 2>&1; then
    sudo ufw allow Transmission
  elif dpkg -s transmission-gtk > /dev/null 2>&1; then
    sudo ufw allow Transmission
  fi

  show_info "Enabling ufw."
  sudo ufw enable
  sudo systemctl enable ufw
}

function install_tor {
  local tor="${DIR}/packages/tor.list"

  show_header "Installing Tor programs."
  check_installed "${tor}"
  check_fail
  show_success "Tor installed."

  show_info "Enabling and starting tor service."
  sudo systemctl enable tor
  sudo systemctl start tor
}

function use_onion_repos {
  local srclist="/etc/apt/sources.list"

  show_header "Tunneling apt over tor for Debian $(lsb_release -sc)."

  local is_contrib
  grep -q contrib ${srclist}
  is_contrib=$?
  local is_nonfree
  grep -q non-free ${srclist}
  is_nonfree=$?

  local release
  release=$(lsb_release -sc)
  sudo cp -f ${srclist} ${srclist}.${RANDOM}.bak
  sudo cp -f "${DIR}/sources/${release}-sources.list" ${srclist}

  [ ${is_contrib} == 0 ] &&
    sudo sed -i "s,\(.* ${release} main.*\)$,\1 contrib,g" ${srclist} &&
    sudo sed -i "s,\(.* ${release}-updates main.*\)$,\1 contrib,g" ${srclist}
    sudo sed -i "s,\(.* ${release}-backports main.*\)$,\1 contrib,g" ${srclist}
  [ ${is_nonfree} == 0 ] &&
    sudo sed -i "s,\(.* ${release} main.*\)$,\1 non-free,g" ${srclist} &&
    sudo sed -i "s,\(.* ${release}-updates main.*\)$,\1 non-free,g" ${srclist}
    sudo sed -i "s,\(.* ${release}-backports main.*\)$,\1 non-free,g" ${srclist}
  sudo sed -i "s,https://deb.debian.org,tor+http://vwakviie2ienjx6t.onion,g" ${srclist}
  sudo sed -i "s,https://security.debian.org/,tor+http://sgvtcaew4bxjd7ln.onion/debian-security/,g" ${srclist}

  sudo apt update
}

function 03-network {
  show_question "Network: what do you want to install?"
  show_info "Main\n ${ENDBRANCH} Network (Hit ENTER to see options again.)"

  local options=(
    "Back"
    "All"
    "Networking"
    "Local discovery"
    "Firewall"
    "Install Tor"
    "Tunnel apt over Tor")
  local option
  select option in "${options[@]}"; do
    case "${option}" in
      "Back")
        break
        ;;
      "All")
        install_network
        install_discovery
        install_firewall
        install_tor
        use_onion_repos
        show_info "Main\n ${ENDBRANCH} Network (Hit ENTER to see options again.)"
        ;;
      "Networking")
        install_network
        show_info "Main\n ${ENDBRANCH} Network (Hit ENTER to see options again.)"
        ;;
      "Local discovery")
        install_discovery
        show_info "Main\n ${ENDBRANCH} Network (Hit ENTER to see options again.)"
        ;;
      "Firewall")
        install_firewall
        show_info "Main\n ${ENDBRANCH} Network (Hit ENTER to see options again.)"
        ;;
      "Install Tor")
        install_tor
        show_info "Main\n ${ENDBRANCH} Network (Hit ENTER to see options again.)"
        ;;
      "Tunnel apt over Tor")
        install_tor
        use_onion_repos
        show_info "Main\n ${ENDBRANCH} Network (Hit ENTER to see options again.)"
        ;;
      *)
        show_warning "Invalid option."
        ;;
    esac
  done
}
